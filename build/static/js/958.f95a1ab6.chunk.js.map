{"version":3,"file":"static/js/958.f95a1ab6.chunk.js","mappings":"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","sources":["pages/window/WebglHowItWorks/canvasWebgl.js","pages/window/WebglHowItWorks/index.js","pages/window/webglCommon/index.js","pages/window/webglScript/m3.js","webpack://my-app-react/./src/pages/window/webglCommon/style.less?3477"],"sourcesContent":["import { createProgramFromStrings } from '../webglCommon'\r\nconst m3 = require('../webglScript/m3')\r\n\r\n\r\n\r\nexport function rectangle(canvas) {\r\n  const gl = canvas.getContext('webgl')\r\n  if (!gl) {\r\n    return\r\n  }\r\n\r\n\r\n  const vertexShaderSource = `\r\n    // 定义顶点二维向量\r\n    attribute vec2 a_position;\r\n    // 颜色属性 四维向量 rgba\r\n    attribute vec4 a_color;\r\n    // 全局变量矩阵 3*3的方阵\r\n    uniform mat3 u_matrix;\r\n    // 可变量颜色 四维向量\r\n    varying vec4 to_f_color;\r\n    \r\n    void main() {\r\n      //\r\n      // 位置乘以矩阵（该矩阵是一个缩放，旋转，平移的因子）\r\n      gl_Position = vec4((u_matrix * vec3(a_position, 1)).x,(u_matrix * vec3(a_position, 1)).y,   0,    1);\r\n    \r\n      // Copy the color from the attribute to the varying.\r\n      to_f_color = a_color;\r\n    }\r\n  `\r\n  const fragmentShaderSource = `\r\n    precision mediump float;\r\n    varying vec4 to_f_color;\r\n    \r\n    \r\n    void main() {\r\n      gl_FragColor = to_f_color;\r\n    }\r\n  `\r\n  /**\r\n   *  设置着色器程序\r\n   * （顶点着色器定义了position的转换方法）\r\n   * (片段着色器中定义了颜色变量)\r\n   */\r\n  const program = createProgramFromStrings(\r\n    gl, vertexShaderSource, fragmentShaderSource\r\n  )\r\n\r\n  /**\r\n   * 在程序着色程序中找到位置和颜色变量\r\n   */\r\n  const positionLocation = gl.getAttribLocation(program, 'a_position')\r\n  const colorLocation = gl.getAttribLocation(program, 'a_color')\r\n\r\n  /**\r\n   * 找到全局变量矩阵信息\r\n   * @type {WebGLUniformLocation}\r\n   */\r\n  const matrixLocation = gl.getUniformLocation(program, 'u_matrix')\r\n  //=====================================几何位置绑定=============================\r\n  /**\r\n   * 创建一个顶点信息缓冲区\r\n   * 将缓冲区绑定到绑定点\r\n   * tips:\r\n   * gl.createBuffer 创建一个缓冲\r\n   * gl.bindBuffer 设置缓冲为当前使用的缓冲\r\n   * gl.bufferData将数据拷贝到缓冲，这个操作一般在初始化完成\r\n   * 以下操作完成了将数据拷贝到 positionBuffer\r\n   * @type {WebGLBuffer | AudioBuffer}\r\n   */\r\n  const positionBuffer = gl.createBuffer()\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer)\r\n  /**\r\n   * 设置顶点几何信息（即坐标信息）\r\n   */\r\n  setGeometry(gl)\r\n  //============================================================================\r\n\r\n  //=====================================颜色信息绑定=============================\r\n  /**\r\n   * 创建一个颜色信息缓冲却\r\n   * 将缓冲区绑定在绑定点\r\n   * @type {WebGLBuffer | AudioBuffer}\r\n   */\r\n  const colorBuffer = gl.createBuffer()\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer)\r\n  /**\r\n   * 设置颜色信息\r\n   */\r\n  setColors(gl)\r\n  //===========================================================================\r\n\r\n\r\n  // 设置平移的初始值\r\n  let translation = [0, 0]\r\n  // 设置旋转的初始值（旋转中心点为左上角的点）\r\n  let angleInRadians = 0\r\n  // 设置缩放的初始值（长宽的缩放问题）\r\n  let scale = [1, 1]\r\n  // 开始画当前的图像信息\r\n  drawScene()\r\n  function updatePosition(event, ui) {\r\n    translation = ui.value\r\n    drawScene()\r\n  }\r\n\r\n  function updateAngle(event, ui) {\r\n    const angleInDegrees = 360 - ui.value\r\n    angleInRadians = angleInDegrees * Math.PI / 180\r\n    drawScene()\r\n  }\r\n\r\n  function updateScale(event, ui) {\r\n    scale = ui.value\r\n    drawScene()\r\n  }\r\n\r\n\r\n  // 开始画图\r\n  function drawScene() {\r\n\r\n    // 从裁剪空间抓换到屏幕空间上\r\n    // 裁剪空间通常设置为0，0（因为裁剪会造成图像的一部分丢失掉）\r\n    gl.viewport(\r\n      0, 0, gl.canvas.width, gl.canvas.height\r\n    )\r\n\r\n    // 清除画布信息\r\n    gl.clear(gl.COLOR_BUFFER_BIT)\r\n\r\n    // 使用着色程序\r\n    gl.useProgram(program)\r\n\r\n    // 开启位置属性\r\n    gl.enableVertexAttribArray(positionLocation)\r\n    // 之前数据已经拷贝到了 positionBuffer\r\n    // 绑定顶点缓冲区 (当前缓冲使用 positionBuffer)\r\n    //\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer)\r\n\r\n    // 告诉属性怎么从positionBuffer中读取数据 (ARRAY_BUFFER)\r\n    let size = 2          // 每次迭代运行提取两个单位数据 todo (位置是 [x,y] 格式的 所以是两点)\r\n    let type = gl.FLOAT   // 每个单位的数据类型是32位浮点型\r\n    let normalize = false // 不需要归一化数据\r\n    let stride = 0        // 0 = 移动单位数量 * 每个单位占用内存（sizeof(type)）每次迭代运行运动多少内存到下一个数据开始点\r\n    let offset = 0        // 从缓冲起始位置开始读取\r\n    /**\r\n     * tips\r\n     * 因为当前的ARRAY_BUFFER是positionBuffer\r\n     * 也就是将当前的positionBuffer数据写入在了顶点属性位置positionLocation\r\n     *\r\n     * 每个顶点有几个单位的数据(1 - 4)，\r\n     * 单位数据类型是什么(BYTE, FLOAT, INT, UNSIGNED_SHORT, 等等...)，\r\n     * stride 是从一个数据到下一个数据要跳过多少位，\r\n     * 最后是数据在缓冲的什么位置。\r\n     *\r\n     * todo 关于webgl的性能方面的优化点\r\n     * 如果每个类型的数据都用一个缓冲存储，stride 和 offset 都是 0 。\r\n     * 对 stride 来说 0 表示 “用符合单位类型和单位个数的大小”。 对 offset 来说 0 表示从缓冲起始位置开始读取。\r\n     * 它们使用 0 以外的值时会复杂得多，虽然这样会取得一些性能能上的优势，\r\n     * 但是一般情况下并不值得，除非你想充分压榨WebGL的性能。\r\n     *\r\n     *\r\n     * 一个额外的信息是gl.vertexAttribPointer是将属性绑定到当前的ARRAY_BUFFER。\r\n     * 换句话说就是绑定到 positionBuffer上。\r\n     * 这也意味着现在利用绑定点随意将 ARRAY_BUFFER绑定到其它数据上后，该属性依然从positionBuffer上读取数据\r\n     */\r\n    gl.vertexAttribPointer(\r\n      positionLocation, size, type, normalize, stride, offset\r\n    )\r\n\r\n    // 开启颜色属性\r\n    gl.enableVertexAttribArray(colorLocation)\r\n\r\n    // 绑定颜色缓冲区\r\n    // 在此设置当前绑定点是colorBuffer\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer)\r\n\r\n    // 告诉属性怎么从colorBuffer中读取数据\r\n    size = 4          // 每次迭代运行提取4个单位数据  todo (颜色是 rgba 格式的 所以是由四个数据)\r\n\r\n    // todo 这里对颜色使用了归一化处理，当然也可以对\r\n    // type = gl.FLOAT   // 每个单位的数据类型是32位浮点型\r\n    // normalize = false // 不需要归一化数据\r\n\r\n    type = gl.UNSIGNED_BYTE  // 数据类型是8位的 UNSIGNED_BYTE 类型。\r\n    normalize = true\r\n\r\n    stride = 0        // 0 = 移动单位数量 * 每个单位占用内存（sizeof(type)）每次迭代运行运动多少内存到下一个数据开始点\r\n    offset = 0        // 从缓冲起始位置开始读取\r\n    /**\r\n     * tips\r\n     * 因为当前的ARRAY_BUFFER是colorBuffer\r\n     * 也就是将当前的colorBuffer数据写入在了颜色属性上\r\n     */\r\n    gl.vertexAttribPointer(\r\n      colorLocation, size, type, normalize, stride, offset\r\n    )\r\n\r\n    // 创建 3*3的裁剪空间，也叫做齐次裁剪空间；（该矩阵叫做裁剪矩阵，也叫做投影矩阵）\r\n    let matrix = m3.projection(gl.canvas.clientWidth, gl.canvas.clientHeight)\r\n    console.log(matrix)\r\n    /**\r\n     * todo\r\n     * 对矩阵进行平移变换\r\n     */\r\n    matrix = m3.translate(\r\n      matrix, translation[0], translation[1]\r\n    )\r\n    /**\r\n     * todo\r\n     * 对矩阵进行旋转变换\r\n     */\r\n    matrix = m3.rotate(matrix, angleInRadians)\r\n    /**\r\n     * todo\r\n     * 对矩阵进行缩放变换\r\n     */\r\n    matrix = m3.scale(\r\n      matrix, scale[0], scale[1]\r\n    )\r\n\r\n    // 在矩阵位置设置该矩阵\r\n    // 这里设置了矩阵信息\r\n    gl.uniformMatrix3fv(\r\n      matrixLocation, false, matrix\r\n    )\r\n\r\n    /**\r\n     * todo\r\n     * 顶点信息\r\n     * 颜色信息设置好之后\r\n     * 开始进行图像绘制\r\n     * @type {string|number|GLenum|*}\r\n     */\r\n    const primitiveType = gl.TRIANGLES\r\n    offset = 0\r\n    const count = 6\r\n    /**\r\n     *  todo\r\n     *  执行渲染，\r\n     *  此时矩阵数据，颜色属性，顶点属性已经被设置好\r\n     *  可直接绘制三角形\r\n     */\r\n    gl.drawArrays(\r\n      primitiveType, offset, count\r\n    )\r\n\r\n  }\r\n  return {\r\n    updateAngle,\r\n    updatePosition,\r\n    updateScale,\r\n  }\r\n}\r\n\r\n\r\n// 用定义矩形的值填充缓冲区。\r\n// 将把值放在当前的任何缓冲区中\r\n// 绑定到 ARRAY_BUFFER 绑定点\r\n\r\n// 最后一个参数gl.STATIC_DRAW是提示WebGL我们将怎么使用这些数据\r\n// WebGL会根据提示做出一些优化。\r\n// gl.STATIC_DRAW提示WebGL我们不会经常改变这些数据。\r\nfunction setGeometry(gl) {\r\n  //gl.bufferData将数据拷贝到缓冲，这个操作一般在初始化完成\r\n  gl.bufferData(\r\n    gl.ARRAY_BUFFER,\r\n    new Float32Array([\r\n      0, 0,\r\n      0, 200, // 公共点1\r\n      200,  0, // 公共点2\r\n      0, 200,\r\n      200,  0,\r\n      200,  200]),\r\n    gl.STATIC_DRAW\r\n  )\r\n}\r\n\r\n// 用定义颜色的值填充缓冲区。\r\n// 将把值放在当前的任何缓冲区中\r\n// 绑定到 ARRAY_BUFFER 绑定点\r\n// function setColors(gl) {\r\n//   // 两种随机颜色\r\n//   const r1 = Math.random()\r\n//   const b1 = Math.random()\r\n//   const g1 = Math.random()\r\n//   const r2 = Math.random()\r\n//   const b2 = Math.random()\r\n//   const g2 = Math.random()\r\n//\r\n//   gl.bufferData(\r\n//     gl.ARRAY_BUFFER,\r\n//     new Float32Array([r1, b1, g1, 1,\r\n//       r1, b1, g1, 1,\r\n//       r1, b1, g1, 1,\r\n//       r2, b2, g2, 1,\r\n//       r2, b2, g2, 1,\r\n//       r2, b2, g2, 1]),\r\n//     gl.STATIC_DRAW\r\n//   )\r\n// }\r\n\r\n\r\n// todo 颜色归一化相关\r\n// 给矩形的两个三角形\r\n// 设置颜色值并发到缓冲\r\nfunction setColors(gl) {\r\n  // 设置两个随机颜色\r\n  const r1 = Math.random() * 256 // 0 到 255.99999 之间\r\n  const b1 = Math.random() * 256 // 这些数据\r\n  const g1 = Math.random() * 256 // 在存入缓冲时\r\n  const r2 = Math.random() * 256 // 将被截取成\r\n  const b2 = Math.random() * 256 // Uint8Array 类型\r\n  const g2 = Math.random() * 256\r\n\r\n  gl.bufferData(\r\n    gl.ARRAY_BUFFER,\r\n    // Uint8Array\r\n    new Uint8Array([r1, b1, g1, 255,\r\n      r1, b1, g1, 255,\r\n      r1, b1, g1, 255,\r\n      r2, b2, g2, 255,\r\n      r2, b2, g2, 255,\r\n      r2, b2, g2, 255]),\r\n    gl.STATIC_DRAW\r\n  )\r\n}\r\n","import React, { useRef, useState } from 'react'\r\nimport styles from '../webglCommon/style.less'\r\nimport { rectangle } from './canvasWebgl'\r\n\r\nexport default function WebglHowItWorks() {\r\n  const canvasRef = useRef(null)\r\n  const [updateHandlers, setHandlers] = useState({})\r\n\r\n  const drawTriangles = () => {\r\n    const handlers = rectangle(canvasRef.current)\r\n    setHandlers(handlers)\r\n  }\r\n  const { updateAngle, updatePosition, updateScale, } = updateHandlers\r\n  const onUpdateAngle = (ev) => {\r\n    if (!updateAngle) return\r\n    updateAngle(ev, {\r\n      value: 45,\r\n    })\r\n  }\r\n  const onUpdatePosition = (ev) => {\r\n    if (!updatePosition) return\r\n    updatePosition(ev, {\r\n      value: [100, 100],\r\n    })\r\n  }\r\n  const onUpdateScale = (ev) => {\r\n    if (!updateScale) return\r\n    updateScale(ev, {\r\n      value: [2, 0.5],\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <canvas className={ styles.canvasContainer} ref={canvasRef} width={400} height={300} ></canvas>\r\n      <div>\r\n        <div className={styles.canvasButton} onClick={drawTriangles}>绘制三角形</div>\r\n        <div className={styles.canvasButton} onClick={onUpdateAngle}>旋转角度</div>\r\n        <div className={styles.canvasButton} onClick={onUpdatePosition}>进行位移</div>\r\n        <div className={styles.canvasButton} onClick={onUpdateScale}>进行缩放</div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","\r\n\r\n// 创建着色器方法，输入参数：渲染上下文，着色器类型，数据源\r\nexport function createShader(\r\n  gl, type, source\r\n) {\r\n  const shader = gl.createShader(type) // 创建着色器对象\r\n  gl.shaderSource(shader, source) // 提供数据源\r\n  gl.compileShader(shader) // 编译 -> 生成着色器\r\n  const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS)\r\n  if (success) {\r\n    return shader\r\n  }\r\n\r\n  console.log('getShaderInfoLog', gl.getShaderInfoLog(shader))\r\n  gl.deleteShader(shader)\r\n}\r\n\r\n\r\n// 然后我们将这两个着色器 link（链接）到一个 program（着色程序）\r\nexport function createProgram(\r\n  gl, vertexShader, fragmentShader\r\n) {\r\n  const program = gl.createProgram()\r\n  gl.attachShader(program, vertexShader)\r\n  gl.attachShader(program, fragmentShader)\r\n  gl.linkProgram(program)\r\n\r\n  const success = gl.getProgramParameter(program, gl.LINK_STATUS)\r\n  if (success) {\r\n    return program\r\n  }\r\n\r\n  console.log(gl.getProgramInfoLog(program))\r\n  gl.deleteProgram(program)\r\n}\r\n\r\nexport function createProgramFromStrings(\r\n  gl, vertexShaderSource, fragmentShaderSource\r\n) {\r\n// 创建顶点着色器\r\n  const vertexShader = createShader(\r\n    gl, gl.VERTEX_SHADER, vertexShaderSource\r\n  )\r\n  // 创建片段着色器\r\n  const fragmentShader = createShader(\r\n    gl, gl.FRAGMENT_SHADER, fragmentShaderSource\r\n  )\r\n  // 将两个着色器链接在一起\r\n  return createProgram(\r\n    gl, vertexShader, fragmentShader\r\n  )\r\n}\r\n\r\n\r\n\r\n\r\n// 定义卷积核\r\nexport const kernels = {\r\n  normal: [\r\n    0, 0, 0,\r\n    0, 1, 0,\r\n    0, 0, 0\r\n  ],\r\n  gaussianBlur: [\r\n    0.045, 0.122, 0.045,\r\n    0.122, 0.332, 0.122,\r\n    0.045, 0.122, 0.045\r\n  ],\r\n  gaussianBlur2: [\r\n    1, 2, 1,\r\n    2, 4, 2,\r\n    1, 2, 1\r\n  ],\r\n  gaussianBlur3: [\r\n    0, 1, 0,\r\n    1, 1, 1,\r\n    0, 1, 0\r\n  ],\r\n  unsharpen: [\r\n    -1, -1, -1,\r\n    -1,  9, -1,\r\n    -1, -1, -1\r\n  ],\r\n  sharpness: [\r\n    0, -1, 0,\r\n    -1, 5, -1,\r\n    0, -1, 0\r\n  ],\r\n  sharpen: [\r\n    -1, -1, -1,\r\n    -1, 16, -1,\r\n    -1, -1, -1\r\n  ],\r\n  edgeDetect: [\r\n    -0.125, -0.125, -0.125,\r\n    -0.125,  1,     -0.125,\r\n    -0.125, -0.125, -0.125\r\n  ],\r\n  edgeDetect2: [\r\n    -1, -1, -1,\r\n    -1,  8, -1,\r\n    -1, -1, -1\r\n  ],\r\n  edgeDetect3: [\r\n    -5, 0, 0,\r\n    0, 0, 0,\r\n    0, 0, 5\r\n  ],\r\n  edgeDetect4: [\r\n    -1, -1, -1,\r\n    0,  0,  0,\r\n    1,  1,  1\r\n  ],\r\n  edgeDetect5: [\r\n    -1, -1, -1,\r\n    2,  2,  2,\r\n    -1, -1, -1\r\n  ],\r\n  edgeDetect6: [\r\n    -5, -5, -5,\r\n    -5, 39, -5,\r\n    -5, -5, -5\r\n  ],\r\n  sobelHorizontal: [\r\n    1,  2,  1,\r\n    0,  0,  0,\r\n    -1, -2, -1\r\n  ],\r\n  sobelVertical: [\r\n    1,  0, -1,\r\n    2,  0, -2,\r\n    1,  0, -1\r\n  ],\r\n  previtHorizontal: [\r\n    1,  1,  1,\r\n    0,  0,  0,\r\n    -1, -1, -1\r\n  ],\r\n  previtVertical: [\r\n    1,  0, -1,\r\n    1,  0, -1,\r\n    1,  0, -1\r\n  ],\r\n  boxBlur: [\r\n    0.111, 0.111, 0.111,\r\n    0.111, 0.111, 0.111,\r\n    0.111, 0.111, 0.111\r\n  ],\r\n  triangleBlur: [\r\n    0.0625, 0.125, 0.0625,\r\n    0.125,  0.25,  0.125,\r\n    0.0625, 0.125, 0.0625\r\n  ],\r\n  emboss: [\r\n    -2, -1,  0,\r\n    -1,  1,  1,\r\n    0,  1,  2\r\n  ],\r\n}\r\n\r\n\r\nexport const effects = [\r\n  { name: 'gaussianBlur3', on: true, },\r\n  { name: 'gaussianBlur3', on: true, },\r\n  { name: 'gaussianBlur3', on: true, },\r\n  { name: 'sharpness', },\r\n  { name: 'sharpness', },\r\n  { name: 'sharpness', },\r\n  { name: 'sharpen', },\r\n  { name: 'sharpen', },\r\n  { name: 'sharpen', },\r\n  { name: 'unsharpen', },\r\n  { name: 'unsharpen', },\r\n  { name: 'unsharpen', },\r\n  { name: 'emboss', on: true, },\r\n  { name: 'edgeDetect', },\r\n  { name: 'edgeDetect', },\r\n  { name: 'edgeDetect3', },\r\n  { name: 'edgeDetect3', }\r\n]\r\n","/*\r\n * Copyright 2021, GFXFundamentals.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are\r\n * met:\r\n *\r\n *     * Redistributions of source code must retain the above copyright\r\n * notice, this list of conditions and the following disclaimer.\r\n *     * Redistributions in binary form must reproduce the above\r\n * copyright notice, this list of conditions and the following disclaimer\r\n * in the documentation and/or other materials provided with the\r\n * distribution.\r\n *     * Neither the name of GFXFundamentals. nor the names of his\r\n * contributors may be used to endorse or promote products derived from\r\n * this software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\r\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\r\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\r\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\r\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * Various 2d math functions.\r\n *\r\n * @module webgl-2d-math\r\n */\r\n(function(root, factory) {  // eslint-disable-line\r\n  if (typeof define === 'function' && define.amd) {\r\n    // AMD. Register as an anonymous module.\r\n    define([], factory)\r\n  } else {\r\n    // Browser globals\r\n    root.m3 = factory()\r\n  }\r\n}(this, function() {\r\n  'use strict'\r\n\r\n  /**\r\n   * An array or typed array with 2 values.\r\n   * @typedef {number[]|TypedArray} Vector2\r\n   * @memberOf module:webgl-2d-math\r\n   */\r\n\r\n  /**\r\n   * An array or typed array with 16 values.\r\n   * @typedef {number[]|TypedArray} Matrix3\r\n   * @memberOf module:webgl-2d-math\r\n   */\r\n\r\n\r\n  let MatType = Float32Array\r\n\r\n  /**\r\n   * Sets the type this library creates for a Mat3\r\n   * @param {constructor} Ctor the constructor for the type. Either `Float32Array` or `Array`\r\n   * @return {constructor} previous constructor for Mat3\r\n   */\r\n  function setDefaultType(Ctor) {\r\n    const OldType = MatType\r\n    MatType = Ctor\r\n    return OldType\r\n  }\r\n\r\n  /**\r\n   * Takes two Matrix3s, a and b, and computes the product in the order\r\n   * that pre-composes b with a.  In other words, the matrix returned will\r\n   * @param {module:webgl-2d-math.Matrix3} a A matrix.\r\n   * @param {module:webgl-2d-math.Matrix3} b A matrix.\r\n   * @param {module:webgl-2d-math.Matrix4} [dst] optional matrix to store result\r\n   * @return {module:webgl-2d-math.Matrix3} the result.\r\n   * @memberOf module:webgl-2d-math\r\n   */\r\n  function multiply(\r\n    a, b, dst\r\n  ) {\r\n    dst = dst || new MatType(9)\r\n    var a00 = a[0 * 3 + 0],\r\n      a01 = a[0 * 3 + 1],\r\n      a02 = a[0 * 3 + 2],\r\n      a10 = a[1 * 3 + 0],\r\n      a11 = a[1 * 3 + 1],\r\n      a12 = a[1 * 3 + 2],\r\n      a20 = a[2 * 3 + 0],\r\n      a21 = a[2 * 3 + 1],\r\n      a22 = a[2 * 3 + 2],\r\n      b00 = b[0 * 3 + 0],\r\n      b01 = b[0 * 3 + 1],\r\n      b02 = b[0 * 3 + 2],\r\n      b10 = b[1 * 3 + 0],\r\n      b11 = b[1 * 3 + 1],\r\n      b12 = b[1 * 3 + 2],\r\n      b20 = b[2 * 3 + 0],\r\n      b21 = b[2 * 3 + 1],\r\n      b22 = b[2 * 3 + 2]\r\n\r\n    dst[0] = b00 * a00 + b01 * a10 + b02 * a20\r\n    dst[1] = b00 * a01 + b01 * a11 + b02 * a21\r\n    dst[2] = b00 * a02 + b01 * a12 + b02 * a22\r\n    dst[3] = b10 * a00 + b11 * a10 + b12 * a20\r\n    dst[4] = b10 * a01 + b11 * a11 + b12 * a21\r\n    dst[5] = b10 * a02 + b11 * a12 + b12 * a22\r\n    dst[6] = b20 * a00 + b21 * a10 + b22 * a20\r\n    dst[7] = b20 * a01 + b21 * a11 + b22 * a21\r\n    dst[8] = b20 * a02 + b21 * a12 + b22 * a22\r\n\r\n    return dst\r\n  }\r\n\r\n\r\n  /**\r\n   * Creates a 3x3 identity matrix\r\n   * @param {module:webgl-2d-math.Matrix4} [dst] optional matrix to store result\r\n   * @return {module:webgl2-2d-math.Matrix3} an identity matrix\r\n   */\r\n  function identity(dst) {\r\n    dst = dst || new MatType(9)\r\n    dst[0] = 1\r\n    dst[1] = 0\r\n    dst[2] = 0\r\n    dst[3] = 0\r\n    dst[4] = 1\r\n    dst[5] = 0\r\n    dst[6] = 0\r\n    dst[7] = 0\r\n    dst[8] = 1\r\n\r\n    return dst\r\n  }\r\n\r\n  /**\r\n   * Creates a 2D projection matrix\r\n   * @param {number} width width in pixels\r\n   * @param {number} height height in pixels\r\n   * @param {module:webgl-2d-math.Matrix4} [dst] optional matrix to store result\r\n   * @return {module:webgl-2d-math.Matrix3} a projection matrix that converts from pixels to clipspace with Y = 0 at the top.\r\n   * @memberOf module:webgl-2d-math\r\n   */\r\n  function projection(\r\n    width, height, dst\r\n  ) {\r\n    dst = dst || new MatType(9)\r\n    // Note: This matrix flips the Y axis so 0 is at the top.\r\n\r\n    dst[0] = 2 / width\r\n    dst[1] = 0\r\n    dst[2] = 0\r\n    dst[3] = 0\r\n    dst[4] = -2 / height\r\n    dst[5] = 0\r\n    dst[6] = -1\r\n    dst[7] = 1\r\n    dst[8] = 1\r\n\r\n    return dst\r\n  }\r\n\r\n  /**\r\n   * Multiplies by a 2D projection matrix\r\n   * @param {module:webgl-2d-math.Matrix3} the matrix to be multiplied\r\n   * @param {number} width width in pixels\r\n   * @param {number} height height in pixels\r\n   * @param {module:webgl-2d-math.Matrix4} [dst] optional matrix to store result\r\n   * @return {module:webgl-2d-math.Matrix3} the result\r\n   * @memberOf module:webgl-2d-math\r\n   */\r\n  function project(\r\n    m, width, height, dst\r\n  ) {\r\n    return multiply(\r\n      m, projection(width, height), dst\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Creates a 2D translation matrix\r\n   * @param {number} tx amount to translate in x\r\n   * @param {number} ty amount to translate in y\r\n   * @param {module:webgl-2d-math.Matrix4} [dst] optional matrix to store result\r\n   * @return {module:webgl-2d-math.Matrix3} a translation matrix that translates by tx and ty.\r\n   * @memberOf module:webgl-2d-math\r\n   */\r\n  function translation(\r\n    tx, ty, dst\r\n  ) {\r\n    dst = dst || new MatType(9)\r\n\r\n    dst[0] = 1\r\n    dst[1] = 0\r\n    dst[2] = 0\r\n    dst[3] = 0\r\n    dst[4] = 1\r\n    dst[5] = 0\r\n    dst[6] = tx\r\n    dst[7] = ty\r\n    dst[8] = 1\r\n\r\n    return dst\r\n  }\r\n\r\n  /**\r\n   * Multiplies by a 2D translation matrix\r\n   * @param {module:webgl-2d-math.Matrix3} the matrix to be multiplied\r\n   * @param {number} tx amount to translate in x\r\n   * @param {number} ty amount to translate in y\r\n   * @param {module:webgl-2d-math.Matrix4} [dst] optional matrix to store result\r\n   * @return {module:webgl-2d-math.Matrix3} the result\r\n   * @memberOf module:webgl-2d-math\r\n   */\r\n  function translate(\r\n    m, tx, ty, dst\r\n  ) {\r\n    return multiply(\r\n      m, translation(tx, ty), dst\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Creates a 2D rotation matrix\r\n   * @param {number} angleInRadians amount to rotate in radians\r\n   * @param {module:webgl-2d-math.Matrix4} [dst] optional matrix to store result\r\n   * @return {module:webgl-2d-math.Matrix3} a rotation matrix that rotates by angleInRadians\r\n   * @memberOf module:webgl-2d-math\r\n   */\r\n  function rotation(angleInRadians, dst) {\r\n    var c = Math.cos(angleInRadians),\r\n      s = Math.sin(angleInRadians)\r\n\r\n    dst = dst || new MatType(9)\r\n\r\n    dst[0] = c\r\n    dst[1] = -s\r\n    dst[2] = 0\r\n    dst[3] = s\r\n    dst[4] = c\r\n    dst[5] = 0\r\n    dst[6] = 0\r\n    dst[7] = 0\r\n    dst[8] = 1\r\n\r\n    return dst\r\n  }\r\n\r\n  /**\r\n   * Multiplies by a 2D rotation matrix\r\n   * @param {module:webgl-2d-math.Matrix3} the matrix to be multiplied\r\n   * @param {number} angleInRadians amount to rotate in radians\r\n   * @param {module:webgl-2d-math.Matrix4} [dst] optional matrix to store result\r\n   * @return {module:webgl-2d-math.Matrix3} the result\r\n   * @memberOf module:webgl-2d-math\r\n   */\r\n  function rotate(\r\n    m, angleInRadians, dst\r\n  ) {\r\n    return multiply(\r\n      m, rotation(angleInRadians), dst\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Creates a 2D scaling matrix\r\n   * @param {number} sx amount to scale in x\r\n   * @param {number} sy amount to scale in y\r\n   * @param {module:webgl-2d-math.Matrix4} [dst] optional matrix to store result\r\n   * @return {module:webgl-2d-math.Matrix3} a scale matrix that scales by sx and sy.\r\n   * @memberOf module:webgl-2d-math\r\n   */\r\n  function scaling(\r\n    sx, sy, dst\r\n  ) {\r\n    dst = dst || new MatType(9)\r\n\r\n    dst[0] = sx\r\n    dst[1] = 0\r\n    dst[2] = 0\r\n    dst[3] = 0\r\n    dst[4] = sy\r\n    dst[5] = 0\r\n    dst[6] = 0\r\n    dst[7] = 0\r\n    dst[8] = 1\r\n\r\n    return dst\r\n  }\r\n\r\n  /**\r\n   * Multiplies by a 2D scaling matrix\r\n   * @param {module:webgl-2d-math.Matrix3} the matrix to be multiplied\r\n   * @param {number} sx amount to scale in x\r\n   * @param {number} sy amount to scale in y\r\n   * @param {module:webgl-2d-math.Matrix4} [dst] optional matrix to store result\r\n   * @return {module:webgl-2d-math.Matrix3} the result\r\n   * @memberOf module:webgl-2d-math\r\n   */\r\n  function scale(\r\n    m, sx, sy, dst\r\n  ) {\r\n    return multiply(\r\n      m, scaling(sx, sy), dst\r\n    )\r\n  }\r\n\r\n  function dot(\r\n    x1, y1, x2, y2\r\n  ) {\r\n    return x1 * x2 + y1 * y2\r\n  }\r\n\r\n  function distance(\r\n    x1, y1, x2, y2\r\n  ) {\r\n    var dx = x1 - x2,\r\n      dy = y1 - y2\r\n    return Math.sqrt(dx * dx + dy * dy)\r\n  }\r\n\r\n  function normalize(x, y) {\r\n    var l = distance(\r\n      0, 0, x, y\r\n    )\r\n    if (l > 0.00001) {\r\n      return [x / l, y / l]\r\n    }\r\n    return [0, 0]\r\n\r\n  }\r\n\r\n  // i = incident\r\n  // n = normal\r\n  function reflect(\r\n    ix, iy, nx, ny\r\n  ) {\r\n    // I - 2.0 * dot(N, I) * N.\r\n    var d = dot(\r\n      nx, ny, ix, iy\r\n    )\r\n    return [\r\n      ix - 2 * d * nx,\r\n      iy - 2 * d * ny\r\n    ]\r\n  }\r\n\r\n  function radToDeg(r) {\r\n    return r * 180 / Math.PI\r\n  }\r\n\r\n  function degToRad(d) {\r\n    return d * Math.PI / 180\r\n  }\r\n\r\n  function transformPoint(m, v) {\r\n    var v0 = v[0],\r\n      v1 = v[1],\r\n      d = v0 * m[0 * 3 + 2] + v1 * m[1 * 3 + 2] + m[2 * 3 + 2]\r\n    return [\r\n      (v0 * m[0 * 3 + 0] + v1 * m[1 * 3 + 0] + m[2 * 3 + 0]) / d,\r\n      (v0 * m[0 * 3 + 1] + v1 * m[1 * 3 + 1] + m[2 * 3 + 1]) / d\r\n    ]\r\n  }\r\n\r\n  function inverse(m, dst) {\r\n    dst = dst || new MatType(9)\r\n\r\n    const m00 = m[0 * 3 + 0]\r\n    const m01 = m[0 * 3 + 1]\r\n    const m02 = m[0 * 3 + 2]\r\n    const m10 = m[1 * 3 + 0]\r\n    const m11 = m[1 * 3 + 1]\r\n    const m12 = m[1 * 3 + 2]\r\n    const m20 = m[2 * 3 + 0]\r\n    const m21 = m[2 * 3 + 1]\r\n    const m22 = m[2 * 3 + 2]\r\n\r\n    const b01 =  m22 * m11 - m12 * m21\r\n    const b11 = -m22 * m10 + m12 * m20\r\n    const b21 =  m21 * m10 - m11 * m20\r\n\r\n    const det = m00 * b01 + m01 * b11 + m02 * b21\r\n    const invDet = 1.0 / det\r\n\r\n    dst[0] = b01 * invDet\r\n    dst[1] = (-m22 * m01 + m02 * m21) * invDet\r\n    dst[2] = (m12 * m01 - m02 * m11) * invDet\r\n    dst[3] = b11 * invDet\r\n    dst[4] = (m22 * m00 - m02 * m20) * invDet\r\n    dst[5] = (-m12 * m00 + m02 * m10) * invDet\r\n    dst[6] = b21 * invDet\r\n    dst[7] = (-m21 * m00 + m01 * m20) * invDet\r\n    dst[8] = (m11 * m00 - m01 * m10) * invDet\r\n\r\n    return dst\r\n  }\r\n\r\n  return {\r\n    degToRad: degToRad,\r\n    distance: distance,\r\n    dot: dot,\r\n    identity: identity,\r\n    inverse: inverse,\r\n    multiply: multiply,\r\n    normalize: normalize,\r\n    projection: projection,\r\n    radToDeg: radToDeg,\r\n    reflect: reflect,\r\n    rotation: rotation,\r\n    rotate: rotate,\r\n    scaling: scaling,\r\n    scale: scale,\r\n    transformPoint: transformPoint,\r\n    translation: translation,\r\n    translate: translate,\r\n    project: project,\r\n  }\r\n\r\n}))\r\n","// extracted by mini-css-extract-plugin\nexport default {\"canvasContainer\":\"canvasContainer_AroEJ\",\"canvasUi\":\"canvasUi_B_Bta\",\"canvasButton\":\"canvasButton_l2P0H\"};"],"names":["m3","require","rectangle","canvas","gl","getContext","program","createProgramFromStrings","positionLocation","getAttribLocation","colorLocation","matrixLocation","getUniformLocation","positionBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","setGeometry","colorBuffer","r1","Math","random","b1","g1","r2","b2","g2","Uint8Array","setColors","translation","angleInRadians","scale","drawScene","updateAngle","event","ui","angleInDegrees","value","PI","updatePosition","updateScale","viewport","width","height","clear","COLOR_BUFFER_BIT","useProgram","enableVertexAttribArray","size","type","FLOAT","normalize","stride","offset","vertexAttribPointer","UNSIGNED_BYTE","matrix","projection","clientWidth","clientHeight","console","log","translate","rotate","uniformMatrix3fv","primitiveType","TRIANGLES","drawArrays","WebglHowItWorks","canvasRef","useRef","useState","updateHandlers","setHandlers","className","styles","ref","onClick","handlers","current","ev","createShader","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","createProgram","vertexShader","fragmentShader","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","vertexShaderSource","fragmentShaderSource","VERTEX_SHADER","FRAGMENT_SHADER","kernels","normal","gaussianBlur","gaussianBlur2","gaussianBlur3","unsharpen","sharpness","sharpen","edgeDetect","edgeDetect2","edgeDetect3","edgeDetect4","edgeDetect5","edgeDetect6","sobelHorizontal","sobelVertical","previtHorizontal","previtVertical","boxBlur","triangleBlur","emboss","effects","name","on","define","MatType","multiply","a","b","dst","a00","a01","a02","a10","a11","a12","a20","a21","a22","b00","b01","b02","b10","b11","b12","b20","b21","b22","identity","project","m","tx","ty","rotation","c","cos","s","sin","scaling","sx","sy","dot","x1","y1","x2","y2","distance","dx","dy","sqrt","x","y","l","reflect","ix","iy","nx","ny","d","radToDeg","r","degToRad","transformPoint","v","v0","v1","inverse","m00","m01","m02","m10","m11","m12","m20","m21","m22","invDet"],"sourceRoot":""}