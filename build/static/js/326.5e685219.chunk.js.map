{"version":3,"file":"static/js/326.5e685219.chunk.js","mappings":"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","sources":["pages/window/webglCommon/index.js","pages/window/webglImageProcess2/gl.js","pages/window/webglImageProcess2/index.js","webpack://my-app-react/./src/pages/window/webglCommon/style.less?3477"],"sourcesContent":["\r\n\r\n// 创建着色器方法，输入参数：渲染上下文，着色器类型，数据源\r\nexport function createShader(\r\n  gl, type, source\r\n) {\r\n  const shader = gl.createShader(type) // 创建着色器对象\r\n  gl.shaderSource(shader, source) // 提供数据源\r\n  gl.compileShader(shader) // 编译 -> 生成着色器\r\n  const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS)\r\n  if (success) {\r\n    return shader\r\n  }\r\n\r\n  console.log('getShaderInfoLog', gl.getShaderInfoLog(shader))\r\n  gl.deleteShader(shader)\r\n}\r\n\r\n\r\n// 然后我们将这两个着色器 link（链接）到一个 program（着色程序）\r\nexport function createProgram(\r\n  gl, vertexShader, fragmentShader\r\n) {\r\n  const program = gl.createProgram()\r\n  gl.attachShader(program, vertexShader)\r\n  gl.attachShader(program, fragmentShader)\r\n  gl.linkProgram(program)\r\n\r\n  const success = gl.getProgramParameter(program, gl.LINK_STATUS)\r\n  if (success) {\r\n    return program\r\n  }\r\n\r\n  console.log(gl.getProgramInfoLog(program))\r\n  gl.deleteProgram(program)\r\n}\r\n\r\nexport function createProgramFromStrings(\r\n  gl, vertexShaderSource, fragmentShaderSource\r\n) {\r\n// 创建顶点着色器\r\n  const vertexShader = createShader(\r\n    gl, gl.VERTEX_SHADER, vertexShaderSource\r\n  )\r\n  // 创建片段着色器\r\n  const fragmentShader = createShader(\r\n    gl, gl.FRAGMENT_SHADER, fragmentShaderSource\r\n  )\r\n  // 将两个着色器链接在一起\r\n  return createProgram(\r\n    gl, vertexShader, fragmentShader\r\n  )\r\n}\r\n\r\n\r\n\r\n\r\n// 定义卷积核\r\nexport const kernels = {\r\n  normal: [\r\n    0, 0, 0,\r\n    0, 1, 0,\r\n    0, 0, 0\r\n  ],\r\n  gaussianBlur: [\r\n    0.045, 0.122, 0.045,\r\n    0.122, 0.332, 0.122,\r\n    0.045, 0.122, 0.045\r\n  ],\r\n  gaussianBlur2: [\r\n    1, 2, 1,\r\n    2, 4, 2,\r\n    1, 2, 1\r\n  ],\r\n  gaussianBlur3: [\r\n    0, 1, 0,\r\n    1, 1, 1,\r\n    0, 1, 0\r\n  ],\r\n  unsharpen: [\r\n    -1, -1, -1,\r\n    -1,  9, -1,\r\n    -1, -1, -1\r\n  ],\r\n  sharpness: [\r\n    0, -1, 0,\r\n    -1, 5, -1,\r\n    0, -1, 0\r\n  ],\r\n  sharpen: [\r\n    -1, -1, -1,\r\n    -1, 16, -1,\r\n    -1, -1, -1\r\n  ],\r\n  edgeDetect: [\r\n    -0.125, -0.125, -0.125,\r\n    -0.125,  1,     -0.125,\r\n    -0.125, -0.125, -0.125\r\n  ],\r\n  edgeDetect2: [\r\n    -1, -1, -1,\r\n    -1,  8, -1,\r\n    -1, -1, -1\r\n  ],\r\n  edgeDetect3: [\r\n    -5, 0, 0,\r\n    0, 0, 0,\r\n    0, 0, 5\r\n  ],\r\n  edgeDetect4: [\r\n    -1, -1, -1,\r\n    0,  0,  0,\r\n    1,  1,  1\r\n  ],\r\n  edgeDetect5: [\r\n    -1, -1, -1,\r\n    2,  2,  2,\r\n    -1, -1, -1\r\n  ],\r\n  edgeDetect6: [\r\n    -5, -5, -5,\r\n    -5, 39, -5,\r\n    -5, -5, -5\r\n  ],\r\n  sobelHorizontal: [\r\n    1,  2,  1,\r\n    0,  0,  0,\r\n    -1, -2, -1\r\n  ],\r\n  sobelVertical: [\r\n    1,  0, -1,\r\n    2,  0, -2,\r\n    1,  0, -1\r\n  ],\r\n  previtHorizontal: [\r\n    1,  1,  1,\r\n    0,  0,  0,\r\n    -1, -1, -1\r\n  ],\r\n  previtVertical: [\r\n    1,  0, -1,\r\n    1,  0, -1,\r\n    1,  0, -1\r\n  ],\r\n  boxBlur: [\r\n    0.111, 0.111, 0.111,\r\n    0.111, 0.111, 0.111,\r\n    0.111, 0.111, 0.111\r\n  ],\r\n  triangleBlur: [\r\n    0.0625, 0.125, 0.0625,\r\n    0.125,  0.25,  0.125,\r\n    0.0625, 0.125, 0.0625\r\n  ],\r\n  emboss: [\r\n    -2, -1,  0,\r\n    -1,  1,  1,\r\n    0,  1,  2\r\n  ],\r\n}\r\n\r\n\r\nexport const effects = [\r\n  { name: 'gaussianBlur3', on: true, },\r\n  { name: 'gaussianBlur3', on: true, },\r\n  { name: 'gaussianBlur3', on: true, },\r\n  { name: 'sharpness', },\r\n  { name: 'sharpness', },\r\n  { name: 'sharpness', },\r\n  { name: 'sharpen', },\r\n  { name: 'sharpen', },\r\n  { name: 'sharpen', },\r\n  { name: 'unsharpen', },\r\n  { name: 'unsharpen', },\r\n  { name: 'unsharpen', },\r\n  { name: 'emboss', on: true, },\r\n  { name: 'edgeDetect', },\r\n  { name: 'edgeDetect', },\r\n  { name: 'edgeDetect3', },\r\n  { name: 'edgeDetect3', }\r\n]\r\n","import { createProgramFromStrings } from '../webglCommon'\r\n// eslint-disable-next-line no-duplicate-imports\r\nimport { kernels, effects } from '../webglCommon'\r\n\r\nexport function render(\r\n  canvas, image, ui\r\n) {\r\n  // Get A WebGL context\r\n  const vertexShaderSource = `\r\n  // 一个buffer缓存区，存储大小为图片宽高\r\n  attribute vec2 a_position;\r\n  // 一个纹理缓冲区\r\n  attribute vec2 a_texCoord;\r\n  // 一个全局变量 内容为图片的宽高\r\n  uniform vec2 u_resolution;\r\n  uniform float u_flipY;\r\n  \r\n  varying vec2 v_texCoord;\r\n  \r\n  void main() {\r\n     // convert the rectangle from pixels to 0.0 to 1.0\r\n     // 将矩形\r\n     vec2 zeroToOne = a_position / u_resolution;\r\n  \r\n     // convert from 0->1 to 0->2\r\n     vec2 zeroToTwo = zeroToOne * 2.0;\r\n  \r\n     // convert from 0->2 to -1->+1 (clipspace)\r\n     vec2 clipSpace = zeroToTwo - 1.0;\r\n  \r\n     gl_Position = vec4(clipSpace * vec2(1, u_flipY), 0, 1);\r\n  \r\n     // pass the texCoord to the fragment shader\r\n     // The GPU will interpolate this value between points.\r\n     v_texCoord = a_texCoord;\r\n  }\r\n  `\r\n  const fragmentShaderSource = `\r\n  precision mediump float;\r\n\r\n  // our texture\r\n  uniform sampler2D u_image;\r\n  uniform vec2 u_textureSize;\r\n  uniform float u_kernel[9];\r\n  uniform float u_kernelWeight;\r\n  \r\n  // the texCoords passed in from the vertex shader.\r\n  varying vec2 v_texCoord;\r\n  \r\n  void main() {\r\n     vec2 onePixel = vec2(1.0, 1.0) / u_textureSize;\r\n     vec4 colorSum =\r\n         texture2D(u_image, v_texCoord + onePixel * vec2(-1, -1)) * u_kernel[0] +\r\n         texture2D(u_image, v_texCoord + onePixel * vec2( 0, -1)) * u_kernel[1] +\r\n         texture2D(u_image, v_texCoord + onePixel * vec2( 1, -1)) * u_kernel[2] +\r\n         texture2D(u_image, v_texCoord + onePixel * vec2(-1,  0)) * u_kernel[3] +\r\n         texture2D(u_image, v_texCoord + onePixel * vec2( 0,  0)) * u_kernel[4] +\r\n         texture2D(u_image, v_texCoord + onePixel * vec2( 1,  0)) * u_kernel[5] +\r\n         texture2D(u_image, v_texCoord + onePixel * vec2(-1,  1)) * u_kernel[6] +\r\n         texture2D(u_image, v_texCoord + onePixel * vec2( 0,  1)) * u_kernel[7] +\r\n         texture2D(u_image, v_texCoord + onePixel * vec2( 1,  1)) * u_kernel[8] ;\r\n     gl_FragColor = vec4((colorSum / u_kernelWeight).rgb, 1);\r\n  }\r\n  `\r\n  const gl = canvas.getContext('webgl')\r\n  if (!gl) {\r\n    return\r\n  }\r\n\r\n  // 启动一个着色器程序\r\n  const program = createProgramFromStrings(\r\n    gl, vertexShaderSource, fragmentShaderSource\r\n  )\r\n\r\n  // 找到程序中的位置变量和纹理变量\r\n  const positionLocation = gl.getAttribLocation(program, 'a_position')\r\n  const texcoordLocation = gl.getAttribLocation(program, 'a_texCoord')\r\n\r\n  // Create a buffer to put three 2d clip space points in\r\n  const positionBuffer = gl.createBuffer()\r\n  // Bind it to ARRAY_BUFFER (think of it as ARRAY_BUFFER = positionBuffer)\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer)\r\n  // Set a rectangle the same size as the image.\r\n  setRectangle(\r\n    gl, 0, 0, image.width, image.height\r\n  )\r\n\r\n  // provide texture coordinates for the rectangle.\r\n  const texcoordBuffer = gl.createBuffer()\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, texcoordBuffer)\r\n  gl.bufferData(\r\n    gl.ARRAY_BUFFER, new Float32Array([\r\n      0.0,  0.0,\r\n      1.0,  0.0,\r\n      0.0,  1.0,\r\n      0.0,  1.0,\r\n      1.0,  0.0,\r\n      1.0,  1.0\r\n    ]), gl.STATIC_DRAW\r\n  )\r\n\r\n  function createAndSetupTexture(gl) {\r\n    const texture = gl.createTexture()\r\n    gl.bindTexture(gl.TEXTURE_2D, texture)\r\n\r\n    // Set up texture so we can render any size image and so we are\r\n    // working with pixels.\r\n    gl.texParameteri(\r\n      gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE\r\n    )\r\n    gl.texParameteri(\r\n      gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE\r\n    )\r\n    gl.texParameteri(\r\n      gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST\r\n    )\r\n    gl.texParameteri(\r\n      gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST\r\n    )\r\n    return texture\r\n  }\r\n\r\n  // Create a texture and put the image in it.\r\n  const originalImageTexture = createAndSetupTexture(gl)\r\n  gl.texImage2D(\r\n    gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image\r\n  )\r\n\r\n  // create 2 textures and attach them to framebuffers.\r\n  const textures = []\r\n  const framebuffers = []\r\n  for (let ii = 0; ii < 2; ++ii) {\r\n    const texture = createAndSetupTexture(gl)\r\n    textures.push(texture)\r\n\r\n    // make the texture the same size as the image\r\n    gl.texImage2D(\r\n      gl.TEXTURE_2D, 0, gl.RGBA, image.width, image.height, 0,\r\n      gl.RGBA, gl.UNSIGNED_BYTE, null\r\n    )\r\n\r\n    // Create a framebuffer\r\n    const fbo = gl.createFramebuffer()\r\n    framebuffers.push(fbo)\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo)\r\n\r\n    // Attach a texture to it.\r\n    gl.framebufferTexture2D(\r\n      gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0\r\n    )\r\n  }\r\n\r\n  // lookup uniforms\r\n  const resolutionLocation = gl.getUniformLocation(program, 'u_resolution')\r\n  const textureSizeLocation = gl.getUniformLocation(program, 'u_textureSize')\r\n  const kernelLocation = gl.getUniformLocation(program, 'u_kernel[0]')\r\n  const kernelWeightLocation = gl.getUniformLocation(program, 'u_kernelWeight')\r\n  const flipYLocation = gl.getUniformLocation(program, 'u_flipY')\r\n\r\n\r\n\r\n  // Setup a ui.\r\n  const table = document.createElement('table')\r\n  const tbody = document.createElement('tbody')\r\n  for (let ii = 0; ii < effects.length; ++ii) {\r\n    const effect = effects[ii]\r\n    const tr = document.createElement('tr')\r\n    const td = document.createElement('td')\r\n    const chk = document.createElement('input')\r\n    chk.value = effect.name\r\n    chk.type = 'checkbox'\r\n    if (effect.on) {\r\n      chk.checked = 'true'\r\n    }\r\n    chk.onchange = drawEffects\r\n    td.appendChild(chk)\r\n    td.appendChild(document.createTextNode('≡ ' + effect.name))\r\n    tr.appendChild(td)\r\n    tbody.appendChild(tr)\r\n  }\r\n  table.appendChild(tbody)\r\n  ui.appendChild(table)\r\n\r\n  function computeKernelWeight(kernel) {\r\n    const weight = kernel.reduce(function(prev, curr) {\r\n      return prev + curr\r\n    })\r\n    return weight <= 0 ? 1 : weight\r\n  }\r\n\r\n  function drawEffects() {\r\n\r\n    // Clear the canvas\r\n    gl.clearColor(\r\n      0, 0, 0, 0\r\n    )\r\n    gl.clear(gl.COLOR_BUFFER_BIT)\r\n\r\n    // Tell it to use our program (pair of shaders)\r\n    gl.useProgram(program)\r\n\r\n    // Turn on the position attribute\r\n    gl.enableVertexAttribArray(positionLocation)\r\n\r\n    // Bind the position buffer.\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer)\r\n\r\n    // Tell the position attribute how to get data out of positionBuffer (ARRAY_BUFFER)\r\n    let size = 2          // 2 components per iteration\r\n    let type = gl.FLOAT   // the data is 32bit floats\r\n    let normalize = false // don't normalize the data\r\n    let stride = 0        // 0 = move forward size * sizeof(type) each iteration to get the next position\r\n    let offset = 0        // start at the beginning of the buffer\r\n    gl.vertexAttribPointer(\r\n      positionLocation, size, type, normalize, stride, offset\r\n    )\r\n\r\n    // Turn on the texcoord attribute\r\n    gl.enableVertexAttribArray(texcoordLocation)\r\n\r\n    // bind the texcoord buffer.\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, texcoordBuffer)\r\n\r\n    // Tell the texcoord attribute how to get data out of texcoordBuffer (ARRAY_BUFFER)\r\n    size = 2         // 2 components per iteration\r\n    type = gl.FLOAT  // the data is 32bit floats\r\n    normalize = false// don't normalize the data\r\n    stride = 0    // 0 = move forward size * sizeof(type) each iteration to get the next position\r\n    offset = 0        // start at the beginning of the buffer\r\n    gl.vertexAttribPointer(\r\n      texcoordLocation, size, type, normalize, stride, offset\r\n    )\r\n\r\n    // set the size of the image\r\n    gl.uniform2f(\r\n      textureSizeLocation, image.width, image.height\r\n    )\r\n\r\n    // start with the original image\r\n    gl.bindTexture(gl.TEXTURE_2D, originalImageTexture)\r\n\r\n    // don't y flip images while drawing to the textures\r\n    gl.uniform1f(flipYLocation, 1)\r\n\r\n    // loop through each effect we want to apply.\r\n    let count = 0\r\n    for (let ii = 0; ii < tbody.rows.length; ++ii) {\r\n      const checkbox = tbody.rows[ii].firstChild.firstChild\r\n      if (checkbox.checked) {\r\n        // Setup to draw into one of the framebuffers.\r\n        setFramebuffer(\r\n          framebuffers[count % 2], image.width, image.height\r\n        )\r\n\r\n        drawWithKernel(checkbox.value)\r\n\r\n        // for the next draw, use the texture we just rendered to.\r\n        gl.bindTexture(gl.TEXTURE_2D, textures[count % 2])\r\n\r\n        // increment count so we use the other texture next time.\r\n        count += 1\r\n      }\r\n    }\r\n\r\n    // finally draw the result to the canvas.\r\n    gl.uniform1f(flipYLocation, -1)  // need to y flip for canvas\r\n    setFramebuffer(\r\n      null, gl.canvas.width, gl.canvas.height\r\n    )\r\n    drawWithKernel('normal')\r\n  }\r\n\r\n  function setFramebuffer(\r\n    fbo, width, height\r\n  ) {\r\n    // make this the framebuffer we are rendering to.\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo)\r\n\r\n    // Tell the shader the resolution of the framebuffer.\r\n    gl.uniform2f(\r\n      resolutionLocation, width, height\r\n    )\r\n\r\n    // Tell webgl the viewport setting needed for framebuffer.\r\n    gl.viewport(\r\n      0, 0, width, height\r\n    )\r\n  }\r\n\r\n\r\n  function drawWithKernel(name) {\r\n    // set the kernel and it's weight\r\n    gl.uniform1fv(kernelLocation, kernels[name])\r\n    gl.uniform1f(kernelWeightLocation, computeKernelWeight(kernels[name]))\r\n\r\n    // Draw the rectangle.\r\n    const primitiveType = gl.TRIANGLES\r\n    const offset = 0\r\n    const count = 6\r\n    gl.drawArrays(\r\n      primitiveType, offset, count\r\n    )\r\n  }\r\n}\r\n\r\nfunction setRectangle(\r\n  gl, x, y, width, height\r\n) {\r\n  const x1 = x\r\n  const x2 = x + width\r\n  const y1 = y\r\n  const y2 = y + height\r\n  gl.bufferData(\r\n    gl.ARRAY_BUFFER, new Float32Array([\r\n      x1, y1,\r\n      x2, y1,\r\n      x1, y2,\r\n      x1, y2,\r\n      x2, y1,\r\n      x2, y2\r\n    ]), gl.STATIC_DRAW\r\n  )\r\n}\r\n\r\n","import React, { useRef } from 'react'\r\nimport styles from '../webglCommon/style.less'\r\nimport img from '../WebglImageProcessing/leaves.jpg'\r\nimport { render } from './gl'\r\n\r\nexport default function WebglImageProcess2() {\r\n  const canvasRef = useRef(null)\r\n  const imgRef = useRef(null)\r\n  const uiRef = useRef(null)\r\n  const drawTriangles = () => {\r\n    render(\r\n      canvasRef.current, imgRef.current, uiRef.current\r\n    )\r\n  }\r\n  return (\r\n    <div>\r\n      <canvas className={ styles.canvasContainer} ref={canvasRef} width={400} height={300} ></canvas>\r\n      <div>\r\n\r\n        <div className={styles.canvasUi} ref={uiRef}></div>\r\n        <div className={styles.canvasButton} onClick={drawTriangles}>绘制图形</div>\r\n        <img src={ img } ref={imgRef}/>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"canvasContainer\":\"canvasContainer_AroEJ\",\"canvasUi\":\"canvasUi_B_Bta\",\"canvasButton\":\"canvasButton_l2P0H\"};"],"names":["createShader","gl","type","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","log","getShaderInfoLog","deleteShader","createProgram","vertexShader","fragmentShader","program","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","createProgramFromStrings","vertexShaderSource","fragmentShaderSource","VERTEX_SHADER","FRAGMENT_SHADER","kernels","normal","gaussianBlur","gaussianBlur2","gaussianBlur3","unsharpen","sharpness","sharpen","edgeDetect","edgeDetect2","edgeDetect3","edgeDetect4","edgeDetect5","edgeDetect6","sobelHorizontal","sobelVertical","previtHorizontal","previtVertical","boxBlur","triangleBlur","emboss","effects","name","on","render","canvas","image","ui","getContext","positionLocation","getAttribLocation","texcoordLocation","positionBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","x","y","width","height","x1","x2","y1","y2","bufferData","Float32Array","STATIC_DRAW","setRectangle","texcoordBuffer","originalImageTexture","createAndSetupTexture","texImage2D","TEXTURE_2D","RGBA","UNSIGNED_BYTE","textures","framebuffers","ii","texture","push","fbo","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","resolutionLocation","getUniformLocation","textureSizeLocation","kernelLocation","kernelWeightLocation","flipYLocation","table","document","createElement","tbody","effect","tr","td","chk","value","checked","onchange","drawEffects","appendChild","createTextNode","createTexture","bindTexture","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","clearColor","clear","COLOR_BUFFER_BIT","useProgram","enableVertexAttribArray","size","FLOAT","normalize","stride","offset","vertexAttribPointer","uniform2f","uniform1f","count","rows","length","checkbox","firstChild","setFramebuffer","drawWithKernel","viewport","uniform1fv","kernel","weight","reduce","prev","curr","computeKernelWeight","primitiveType","TRIANGLES","drawArrays","WebglImageProcess2","canvasRef","useRef","imgRef","uiRef","className","styles","ref","onClick","current","src","img"],"sourceRoot":""}