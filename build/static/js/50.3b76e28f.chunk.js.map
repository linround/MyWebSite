{"version":3,"file":"static/js/50.3b76e28f.chunk.js","mappings":"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","sources":["pages/window/Webgl2dRotation/gl.js","pages/window/Webgl2dRotation/index.js","pages/window/webglCommon/index.js","webpack://my-app-react/./src/pages/window/webglCommon/style.less?3477"],"sourcesContent":["import { createProgramFromStrings } from '../webglCommon'\r\n// eslint-disable-next-line no-duplicate-imports\r\n\r\n'use strict'\r\n\r\nexport function render(canvas) {\r\n  const gl = canvas.getContext('webgl')\r\n  if (!gl) {\r\n    return\r\n  }\r\n  const vertexShaderSource = `\r\n      // 存储三角形的顶点数据\r\n      attribute vec2 a_position;\r\n      // 存储映射空间的宽高数据\r\n      uniform vec2 u_resolution;\r\n      // 设置旋转的角度\r\n      uniform vec2 u_rotation;\r\n      // 顶点的位移信息\r\n      uniform vec2 u_translation;\r\n      // 缩放值\r\n      uniform vec2 u_scale;\r\n      void main() {\r\n         // 旋转位置\r\n         vec2 rotatedPosition = vec2(\r\n           a_position.x * u_rotation.y + a_position.y * u_rotation.x,\r\n           a_position.y * u_rotation.y - a_position.x * u_rotation.x);\r\n           // 对旋转后的坐标进行缩放\r\n           vec2 scaledPosition = rotatedPosition * u_scale;\r\n         // 位置=原来的位置信息+位置信息\r\n         vec2 position = scaledPosition + u_translation;\r\n      \r\n         // 将图像信息归一化到裁剪空间 即位置信息/宽高信息 转换到（0，1）范围\r\n         vec2 zeroToOne = position / u_resolution;\r\n      \r\n         // 从（0，1）=> （0，2）\r\n         vec2 zeroToTwo = zeroToOne * 2.0;\r\n      \r\n         // 从 0->2 to -1->+1 (裁剪空间)\r\n         vec2 clipSpace = zeroToTwo - 1.0;\r\n         // 最终得到裁剪空间的顶点坐标值，并且对y轴做了反转\r\n         gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);\r\n      }\r\n  `\r\n  const fragmentShaderSource = `\r\n      precision mediump float;\r\n      // 片元的颜色值\r\n      uniform vec4 u_color;\r\n      \r\n      void main() {\r\n         gl_FragColor = u_color;\r\n      }\r\n  `\r\n\r\n  // 启动一个着色程序\r\n  const program = createProgramFromStrings(\r\n    gl, vertexShaderSource, fragmentShaderSource\r\n  )\r\n  gl.useProgram(program)\r\n\r\n  // 找到顶点位置的变量\r\n  const positionLocation = gl.getAttribLocation(program, 'a_position')\r\n\r\n  // 找到全局变量\r\n  // 存储缩放信息\r\n  const scaleLocation = gl.getUniformLocation(program, 'u_scale')\r\n  // 存储旋转因子\r\n  const rotationLocation = gl.getUniformLocation(program, 'u_rotation')\r\n\r\n  // 存储像素空间的宽高\r\n  const resolutionLocation = gl.getUniformLocation(program, 'u_resolution')\r\n  // 片段着色器中的颜色值变量\r\n  const colorLocation = gl.getUniformLocation(program, 'u_color')\r\n  // 全局位移变量\r\n  const translationLocation = gl.getUniformLocation(program, 'u_translation')\r\n\r\n  // 创建顶点数据缓存区\r\n  const positionBuffer = gl.createBuffer()\r\n  // 将顶点缓冲区绑定在绑定点\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer)\r\n  // 为绑定点的缓冲区输入顶点数据\r\n  setGeometry(gl)\r\n\r\n  const translation = [0, 0]\r\n  const rotation = [0, 1]\r\n  const scale = [1, 1]\r\n  const color = [Math.random(), Math.random(), Math.random(), 1]\r\n\r\n  drawScene()\r\n\r\n  function updatePosition(\r\n    value, rota, scaleValue\r\n  ) {\r\n    if (value) {\r\n      translation[0] = value[0]\r\n      translation[1] = value[1]\r\n    }\r\n    if (rota) {\r\n      rotation[0] = rota[0]\r\n      rotation[1] = rota[1]\r\n    }\r\n    if (scaleValue) {\r\n\r\n      scale[0] = scaleValue[0]\r\n      scale[1] = scaleValue[1]\r\n    }\r\n    drawScene()\r\n  }\r\n  return updatePosition\r\n\r\n  // 根据顶点着色器的信息和片元着色器信息进行绘制\r\n  function drawScene() {\r\n\r\n    // 告诉webgl从裁剪空间转换到像素空间的参数\r\n    gl.viewport(\r\n      0, 0, gl.canvas.width, gl.canvas.height\r\n    )\r\n\r\n    // 清除画布\r\n    gl.clear(gl.COLOR_BUFFER_BIT)\r\n\r\n    // 使用特定的着色其程序（虽然之前以及绑定了）\r\n    gl.useProgram(program)\r\n\r\n    // 开启顶点属性\r\n    gl.enableVertexAttribArray(positionLocation)\r\n\r\n    // 将之前的顶点缓冲数据绑定到绑定点\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer)\r\n\r\n    // T告诉顶点属性如何从绑定点的缓冲区读取顶点数据\r\n    const size = 2          // 每次迭代运行提取两个单位数据\r\n    const type = gl.FLOAT   // 每个单位的数据类型是32位浮点型\r\n    const normalize = false // 不需要归一化数据\r\n    const stride = 0        // 0 = 移动单位数量 * 每个单位占用内存（sizeof(type)）每次迭代运行运动多少内存到下一个数据开始点\r\n    let offset = 0        // 从缓冲起始位置开始读取\r\n    // positionLocation 得到了 positionBuffer的数据\r\n    gl.vertexAttribPointer(\r\n      positionLocation, size, type, normalize, stride, offset\r\n    )\r\n\r\n    // 设置全局变量宽高值\r\n    gl.uniform2f(\r\n      resolutionLocation, gl.canvas.width, gl.canvas.height\r\n    )\r\n\r\n    // 设置颜色\r\n    gl.uniform4fv(colorLocation, color)\r\n    // 设置缩放\r\n    gl.uniform2fv(scaleLocation, scale)\r\n    // 设置位移全局变量\r\n    gl.uniform2fv(translationLocation, translation)\r\n    // 设置旋转\r\n    gl.uniform2fv(rotationLocation, rotation)\r\n    // 开始绘制\r\n    const primitiveType = gl.TRIANGLES\r\n    offset = 0\r\n    const count = 18  // 因为由18个顶点所以要绘制18次\r\n    /**\r\n     * todo\r\n     * 在绘制时会指向顶点着色其程序\r\n     * 在进行像素颜色插值过程中，每个像素都会执行一次片元着色器\r\n     */\r\n    gl.drawArrays(\r\n      primitiveType, offset, count\r\n    )\r\n  }\r\n}\r\n\r\n// 'F'字样的顶点数据.\r\nfunction setGeometry(gl) {\r\n  gl.bufferData(\r\n    gl.ARRAY_BUFFER,\r\n    new Float32Array([\r\n      // 左边一列\r\n      0, 0,\r\n      30, 0,\r\n      0, 150,\r\n      0, 150,\r\n      30, 0,\r\n      30, 150,\r\n\r\n      // 顶部一层\r\n      30, 0,\r\n      100, 0,\r\n      30, 30,\r\n      30, 30,\r\n      100, 0,\r\n      100, 30,\r\n\r\n      // 中间一层\r\n      30, 60,\r\n      67, 60,\r\n      30, 90,\r\n      30, 90,\r\n      67, 60,\r\n      67, 90\r\n    ]),\r\n    gl.STATIC_DRAW\r\n  )\r\n}\r\n","import React, {\n  useEffect, useRef, useState\n} from 'react'\nimport styles from '../webglCommon/style.less'\nimport { render } from './gl'\n\nexport default function Webgl2dRotation() {\n  const canvasRef = useRef(null)\n  const [valueY, setValueY] = useState(0)\n  const [valueX, setValueX] = useState(0)\n  const [degree, setDegree] = useState(0)\n  const [scale, setScale] = useState(50)\n  const handler = {\n    update: () => ({}),\n  }\n  const [fn, setFn] = useState(handler)\n\n\n  useEffect(() => {\n    // 这里只需要\n    const sin = Math.sin(((+degree) / 360) * Math.PI * 2)\n    const cos = Math.cos(((+degree) / 360) * Math.PI * 2)\n    fn.update(\n      [+valueX, +valueY], [sin, cos], [(+scale) / 50, (+scale) / 50]\n    )\n  }, [valueY, valueX, degree, scale])\n\n  const handleSetDegree = (e) => {\n    const value = e.target.value\n    setDegree(value)\n  }\n  const handleSetScale = (e) => {\n    const value = e.target.value\n    setScale((+value))\n  }\n  const drawTriangles = () => {\n    const func = render(canvasRef.current)\n    handler.update = func\n    setFn({\n      update: func,\n    })\n  }\n  const onChangeY = (e) => {\n    const value = e.target.value\n    setValueY(value)\n  }\n  const onChangeX = (e) => {\n    const value = e.target.value\n    setValueX(value)\n  }\n  return (\n    <div>\n      <canvas className={ styles.canvasContainer} ref={canvasRef} width={400} height={300} ></canvas>\n      <div>\n        <div>\n          X：<input type='range' max={400} min={0} onChange={onChangeX} value={valueX}/>\n        </div>\n        <div>\n          Y：<input type='range' max={300} min={0} onChange={onChangeY} value={valueY}/>\n        </div>\n        <div>\n          旋转：<input type='range' max={360} min={0} onChange={handleSetDegree} value={degree}/>\n        </div>\n        <div>\n          缩放：\n          <input\n            type='range'\n            max={100}\n            min={0}\n            onChange={handleSetScale}\n            value={scale}/>\n        </div>\n        <div className={styles.canvasButton} onClick={drawTriangles}>绘制图形</div>\n      </div>\n    </div>\n  )\n}\n","\r\n\r\n// 创建着色器方法，输入参数：渲染上下文，着色器类型，数据源\r\nexport function createShader(\r\n  gl, type, source\r\n) {\r\n  const shader = gl.createShader(type) // 创建着色器对象\r\n  gl.shaderSource(shader, source) // 提供数据源\r\n  gl.compileShader(shader) // 编译 -> 生成着色器\r\n  const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS)\r\n  if (success) {\r\n    return shader\r\n  }\r\n\r\n  console.log('getShaderInfoLog', gl.getShaderInfoLog(shader))\r\n  gl.deleteShader(shader)\r\n}\r\n\r\n\r\n// 然后我们将这两个着色器 link（链接）到一个 program（着色程序）\r\nexport function createProgram(\r\n  gl, vertexShader, fragmentShader\r\n) {\r\n  const program = gl.createProgram()\r\n  gl.attachShader(program, vertexShader)\r\n  gl.attachShader(program, fragmentShader)\r\n  gl.linkProgram(program)\r\n\r\n  const success = gl.getProgramParameter(program, gl.LINK_STATUS)\r\n  if (success) {\r\n    return program\r\n  }\r\n\r\n  console.log(gl.getProgramInfoLog(program))\r\n  gl.deleteProgram(program)\r\n}\r\n\r\nexport function createProgramFromStrings(\r\n  gl, vertexShaderSource, fragmentShaderSource\r\n) {\r\n// 创建顶点着色器\r\n  const vertexShader = createShader(\r\n    gl, gl.VERTEX_SHADER, vertexShaderSource\r\n  )\r\n  // 创建片段着色器\r\n  const fragmentShader = createShader(\r\n    gl, gl.FRAGMENT_SHADER, fragmentShaderSource\r\n  )\r\n  // 将两个着色器链接在一起\r\n  return createProgram(\r\n    gl, vertexShader, fragmentShader\r\n  )\r\n}\r\n\r\n\r\n\r\n\r\n// 定义卷积核\r\nexport const kernels = {\r\n  normal: [\r\n    0, 0, 0,\r\n    0, 1, 0,\r\n    0, 0, 0\r\n  ],\r\n  gaussianBlur: [\r\n    0.045, 0.122, 0.045,\r\n    0.122, 0.332, 0.122,\r\n    0.045, 0.122, 0.045\r\n  ],\r\n  gaussianBlur2: [\r\n    1, 2, 1,\r\n    2, 4, 2,\r\n    1, 2, 1\r\n  ],\r\n  gaussianBlur3: [\r\n    0, 1, 0,\r\n    1, 1, 1,\r\n    0, 1, 0\r\n  ],\r\n  unsharpen: [\r\n    -1, -1, -1,\r\n    -1,  9, -1,\r\n    -1, -1, -1\r\n  ],\r\n  sharpness: [\r\n    0, -1, 0,\r\n    -1, 5, -1,\r\n    0, -1, 0\r\n  ],\r\n  sharpen: [\r\n    -1, -1, -1,\r\n    -1, 16, -1,\r\n    -1, -1, -1\r\n  ],\r\n  edgeDetect: [\r\n    -0.125, -0.125, -0.125,\r\n    -0.125,  1,     -0.125,\r\n    -0.125, -0.125, -0.125\r\n  ],\r\n  edgeDetect2: [\r\n    -1, -1, -1,\r\n    -1,  8, -1,\r\n    -1, -1, -1\r\n  ],\r\n  edgeDetect3: [\r\n    -5, 0, 0,\r\n    0, 0, 0,\r\n    0, 0, 5\r\n  ],\r\n  edgeDetect4: [\r\n    -1, -1, -1,\r\n    0,  0,  0,\r\n    1,  1,  1\r\n  ],\r\n  edgeDetect5: [\r\n    -1, -1, -1,\r\n    2,  2,  2,\r\n    -1, -1, -1\r\n  ],\r\n  edgeDetect6: [\r\n    -5, -5, -5,\r\n    -5, 39, -5,\r\n    -5, -5, -5\r\n  ],\r\n  sobelHorizontal: [\r\n    1,  2,  1,\r\n    0,  0,  0,\r\n    -1, -2, -1\r\n  ],\r\n  sobelVertical: [\r\n    1,  0, -1,\r\n    2,  0, -2,\r\n    1,  0, -1\r\n  ],\r\n  previtHorizontal: [\r\n    1,  1,  1,\r\n    0,  0,  0,\r\n    -1, -1, -1\r\n  ],\r\n  previtVertical: [\r\n    1,  0, -1,\r\n    1,  0, -1,\r\n    1,  0, -1\r\n  ],\r\n  boxBlur: [\r\n    0.111, 0.111, 0.111,\r\n    0.111, 0.111, 0.111,\r\n    0.111, 0.111, 0.111\r\n  ],\r\n  triangleBlur: [\r\n    0.0625, 0.125, 0.0625,\r\n    0.125,  0.25,  0.125,\r\n    0.0625, 0.125, 0.0625\r\n  ],\r\n  emboss: [\r\n    -2, -1,  0,\r\n    -1,  1,  1,\r\n    0,  1,  2\r\n  ],\r\n}\r\n\r\n\r\nexport const effects = [\r\n  { name: 'gaussianBlur3', on: true, },\r\n  { name: 'gaussianBlur3', on: true, },\r\n  { name: 'gaussianBlur3', on: true, },\r\n  { name: 'sharpness', },\r\n  { name: 'sharpness', },\r\n  { name: 'sharpness', },\r\n  { name: 'sharpen', },\r\n  { name: 'sharpen', },\r\n  { name: 'sharpen', },\r\n  { name: 'unsharpen', },\r\n  { name: 'unsharpen', },\r\n  { name: 'unsharpen', },\r\n  { name: 'emboss', on: true, },\r\n  { name: 'edgeDetect', },\r\n  { name: 'edgeDetect', },\r\n  { name: 'edgeDetect3', },\r\n  { name: 'edgeDetect3', }\r\n]\r\n","// extracted by mini-css-extract-plugin\nexport default {\"canvasContainer\":\"canvasContainer_AroEJ\",\"canvasUi\":\"canvasUi_B_Bta\",\"canvasButton\":\"canvasButton_l2P0H\"};"],"names":["render","canvas","gl","getContext","program","createProgramFromStrings","useProgram","positionLocation","getAttribLocation","scaleLocation","getUniformLocation","rotationLocation","resolutionLocation","colorLocation","translationLocation","positionBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","setGeometry","translation","rotation","scale","color","Math","random","drawScene","value","rota","scaleValue","viewport","width","height","clear","COLOR_BUFFER_BIT","enableVertexAttribArray","type","FLOAT","offset","vertexAttribPointer","uniform2f","uniform4fv","uniform2fv","primitiveType","TRIANGLES","drawArrays","Webgl2dRotation","canvasRef","useRef","useState","valueY","setValueY","valueX","setValueX","degree","setDegree","setScale","handler","update","fn","setFn","useEffect","sin","PI","cos","className","styles","ref","max","min","onChange","e","target","onClick","func","current","createShader","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","log","getShaderInfoLog","deleteShader","createProgram","vertexShader","fragmentShader","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","vertexShaderSource","fragmentShaderSource","VERTEX_SHADER","FRAGMENT_SHADER","kernels","normal","gaussianBlur","gaussianBlur2","gaussianBlur3","unsharpen","sharpness","sharpen","edgeDetect","edgeDetect2","edgeDetect3","edgeDetect4","edgeDetect5","edgeDetect6","sobelHorizontal","sobelVertical","previtHorizontal","previtVertical","boxBlur","triangleBlur","emboss","effects","name","on"],"sourceRoot":""}