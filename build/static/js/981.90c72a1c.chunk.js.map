{"version":3,"file":"static/js/981.90c72a1c.chunk.js","mappings":"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","sources":["pages/window/ShadersAndGLSL/index.js","pages/window/ShadersAndGLSL/triangles.js","pages/window/webglCommon/index.js","webpack://my-app-react/./src/pages/window/webglCommon/style.less?3477"],"sourcesContent":["\r\nimport React, { useRef } from 'react'\r\nimport styles from '../webglCommon/style.less'\r\nimport { triangles } from './triangles'\r\n\r\nexport default function ShadersAndGLSL() {\r\n  const canvasRef = useRef(null)\r\n  const drawTriangles = () => {\r\n    triangles(canvasRef.current)\r\n  }\r\n  return (\r\n    <div>\r\n      <canvas className={ styles.canvasContainer} ref={canvasRef} width={400} height={300} ></canvas>\r\n      <div>\r\n        <div className={styles.canvasButton} onClick={drawTriangles}>绘制图形</div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import { createShader, createProgram } from '../webglCommon'\r\n\r\nexport function triangles(canvas) {\r\n  // Get A WebGL context\r\n  const gl = canvas.getContext('webgl')\r\n  if (!gl) {\r\n    return\r\n  }\r\n\r\n  // Get the strings for our GLSL shaders\r\n  // 顶点着色器源\r\n  const vertexShaderSource = `\r\n        // 一个属性值，从缓冲区获取数据\r\n        // a_position属性的数据类型是vec4\r\n        // vec4是一个有四个浮点数据的数据类型。\r\n        // 在JavaScript中你可以把它想象成 a_position = {x: 0, y: 0, z: 0, w: 0}。之前我们设置的size = 2，\r\n        // 属性默认值是0, 0, 0, 1，然后属性将会从缓冲中获取前两个值（ x 和 y ）。 z和w还是默认值 0 和 1 。\r\n        \r\n        attribute vec4 a_position;\r\n        // 设置一个全局偏移量\r\n        uniform vec4 u_offset;\r\n        // 所有的着色器都有一个main函数\r\n        void main() {\r\n    \r\n        // gl_Position 是一个顶点着色器主要设置的变量\r\n        gl_Position = a_position + u_offset;\r\n      }\r\n          `\r\n  // 片段着色器\r\n  const fragmentShaderSource = `\r\n        \r\n    \r\n        // 片断着色器没有默认精度，所以我们需要设置一个精度\r\n        // mediump是一个不错的默认值，代表“medium precision”（中等精度）\r\n        precision mediump float;\r\n    \r\n        void main() {\r\n        // gl_FragColor 是一个片断着色器主要设置的变量\r\n        // 这里的颜色可参考rgba格式进行设置\r\n        gl_FragColor = vec4(0, 0, 0, 1); // 返回“瑞迪施紫色”\r\n      }\r\n          `\r\n\r\n  // 创建顶点着色器\r\n  const vertexShader = createShader(\r\n    gl, gl.VERTEX_SHADER, vertexShaderSource\r\n  )\r\n  // 创建片段着色器\r\n  const fragmentShader = createShader(\r\n    gl, gl.FRAGMENT_SHADER, fragmentShaderSource\r\n  )\r\n\r\n  // 将两个着色器链接在一起\r\n  const program = createProgram(\r\n    gl, vertexShader, fragmentShader\r\n  )\r\n  // 获取全局偏移量的位置\r\n  const offsetLoc = gl.getUniformLocation(program, 'u_offset')\r\n\r\n\r\n  // 创建好了着色程序，我们还需要对他提供数据\r\n  // glsl着色程序唯一输入是一个属性值a_position，从刚创建的着色程序找到这个属性值所在位置\r\n  // 寻找属性值位置应该在初始化的时候完成，而不是在渲染时完成\r\n  const positionAttributeLocation = gl.getAttribLocation(program, 'a_position')\r\n\r\n  // 属性值从缓冲区获取，所以创建一个缓冲\r\n  const positionBuffer = gl.createBuffer()\r\n\r\n  // webgl可以通过绑定点操控全局范围内的许多数据，可以吧绑定点想象成一个全局变量\r\n  // 首先绑定一个数据源到绑定点，然后引用绑定点指向该数据源\r\n  // 以下我们绑定位置信息缓冲（下面的绑定点就是ARRAY_BUFFER）\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer)\r\n\r\n  // 三个二维点坐标\r\n  const positions = [\r\n    -1, 0.2,\r\n    0.2, 0.2,\r\n    -0.2, -0.2,\r\n    // 添加下面三点即可利用三角形绘制矩形\r\n    0.2, 0.2,\r\n    -0.2, -0.2,\r\n    0.2, -0.2\r\n  ]\r\n  // webgl需要强数据类型。所以 new Float32Array(positions) 创建了32位浮点型数据序列\r\n  // 并从positions中复制数据待序列中，\r\n  // gl.bufferData复制这些数据到GPU的positionBuffer对象上\r\n  // 数据最终传递到positionBuffer是因为上一步我们已经将它绑定在了ARRAY_BUFFER（也就是绑定点）上\r\n  // 最后一个参数gl.STATIC_DRAW是提示WebGL我们将怎么使用这些数据\r\n  // WebGL会根据提示做出一些优化。\r\n  // gl.STATIC_DRAW提示WebGL我们不会经常改变这些数据。\r\n  gl.bufferData(\r\n    gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW\r\n  )\r\n\r\n  // 以上都是初始代码，在页面加载时只会运行一次.\r\n  // 以下是渲染代码\r\n\r\n  // 告诉webgl怎样吧提供的gl_Position裁剪空间坐标对应到画布像素坐标（通常画布像素坐标也叫屏幕坐标）\r\n  // 需要调用gl.viewport 方法并传递画布的当前尺寸\r\n  // 这样就告诉webgl裁剪空间的-1=>+1分别对应到X轴的0=>gl.canvas.width 和y轴的 0 -> gl.canvas.height\r\n  gl.viewport(\r\n    0, 0, gl.canvas.width, gl.canvas.height\r\n  )\r\n\r\n  // 用0, 0, 0, 0清空画布，分别对应 r, g, b, alpha （红，绿，蓝，阿尔法）值\r\n  gl.clearColor(\r\n    0, 0, 0, 0\r\n  )\r\n  gl.clear(gl.COLOR_BUFFER_BIT)\r\n\r\n\r\n  // 告诉webgl运行哪个着色程序\r\n  gl.useProgram(program)\r\n\r\n\r\n  /**\r\n   * todo\r\n   * 必须在使用程序后，才能对程序中的变量做相关的赋值操作\r\n   * [x,y,z,w]\r\n   * x 水平方向平移  计算单位是相对于投影坐标\r\n   * x 垂直方向平移  计算单位是相对于投影坐标\r\n   * z\r\n   * w 以自身中心点 来进缩放(-1,+无穷)开区间为放大缩小值\r\n   */\r\n  // 在绘制前为偏移量赋值\r\n  gl.uniform4fv(offsetLoc, [0, 0, 0, 0])  // 向右偏移一半屏幕宽度\r\n\r\n  // 告诉webgl怎么从我们之前准备的缓冲中获取数据给着色器中的属性\r\n  // 首先需要启用对应的属性\r\n  gl.enableVertexAttribArray(positionAttributeLocation)\r\n\r\n  // 将绑定点绑定到缓冲数据（positionBuffer）\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer)\r\n\r\n  // 告诉属性怎么从positionBuffer中读取数据 (ARRAY_BUFFER)\r\n  const size = 2          // 每次迭代运行提取两个单位数据\r\n  const type = gl.FLOAT   // 每个单位的数据类型是32位浮点型\r\n  const normalize = false // 不需要归一化数据\r\n  const stride = 0        // 0 = 移动单位数量 * 每个单位占用内存（sizeof(type)）每次迭代运行运动多少内存到下一个数据开始点\r\n  const offset = 0        // 从缓冲起始位置开始读取\r\n  // 一个额外的信息是gl.vertexAttribPointer是将属性绑定到当前的ARRAY_BUFFER。\r\n  // 换句话说就是绑定到 positionBuffer上。\r\n  // 这也意味着现在利用绑定点随意将 ARRAY_BUFFER绑定到其它数据上后，该属性依然从positionBuffer上读取数据\r\n  /**\r\n   * todo\r\n   * 从array_buffer中为当前位置填写数据\r\n   * positionAttributeLocation 是属性位置，不是缓冲区，所以不能使用gl.bufferData为属性提供数据\r\n   * gl.bufferData是用来想指向的当前的缓冲却填充数据\r\n   *\r\n   * 缓冲区数据填好了之后\r\n   * 使用vertexAttribPointer将缓冲区的数据填写给当前属性的位置\r\n   */\r\n  gl.vertexAttribPointer(\r\n    positionAttributeLocation, size, type, normalize, stride, offset\r\n  )\r\n\r\n\r\n\r\n\r\n  // 开始绘制\r\n  // 因为count = 3，所以顶点着色器将运行三次\r\n  // 第一次运行将会从位置缓冲中读取前两个值赋给属性值a_position.x和a_position.y\r\n  // 第二次运行a_position.xy将会被赋予后两个值，\r\n  // 最后一次运行将被赋予最后两个值\r\n\r\n  // 因为我们设置primitiveType（图元类型）为 gl.TRIANGLES（三角形）， 顶点着色器每运行三次\r\n  // WebGL将会根据三个gl_Position值绘制一个三角形，\r\n  // 不论我们的画布大小是多少，在裁剪空间中每个方向的坐标范围都是 -1 到 1 。\r\n  const primitiveType = gl.TRIANGLES\r\n  // 这里每6次顶点着色器处理成像素坐标点后才会渲染\r\n  const count = 6\r\n\r\n\r\n  // WebGL将会把它们从裁剪空间转换到屏幕空间并在屏幕空间绘制一个三角形， 如果画布大小是400×300我们会得到类似以下的转换\r\n  //   0, 0,   -> 200, 150 位置1\r\n  //   0, 0.5, -> 200, 225 位置2\r\n  //   0.7, 0, -> 340, 150 位置3\r\n\r\n  // 从以上的推断可以得出相关结论\r\n  // canvas中心点为基础点（0，0）\r\n  // （-1，-1） 表示（200 + (200*(-1)),150 + (150*(-1))）\r\n  // （-0.5，0.3） 表示（200 + (200*(-5)),150 + (150*(-3))）\r\n  gl.drawArrays(\r\n    primitiveType, offset, count\r\n  )\r\n}\r\n\r\n\r\n\r\n// todo\r\n/**\r\n *\r\n * 上面的例子中顶点着色器只是简单传递了位置信息\r\n * 由于位置坐标就是裁剪空间中的坐标，所以着色器没有特殊的执行，\r\n * 如果想要实现三位渲染，那么就需要提供合适的着色器将三维坐标转换到裁剪空间坐标\r\n * 因为webgl只是一个光栅化的API\r\n *\r\n * 裁剪空间的x坐标范围是 -1 到 +1. 这就意味着0在中间并且正值在它右边。\r\n * 裁剪空间中 -1 是最底端 +1 是最顶端\r\n * 对于描述二维空间中的物体，比起裁剪空间坐标你可能更希望使用屏幕像素坐标\r\n */\r\n","\r\n\r\n// 创建着色器方法，输入参数：渲染上下文，着色器类型，数据源\r\nexport function createShader(\r\n  gl, type, source\r\n) {\r\n  const shader = gl.createShader(type) // 创建着色器对象\r\n  gl.shaderSource(shader, source) // 提供数据源\r\n  gl.compileShader(shader) // 编译 -> 生成着色器\r\n  const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS)\r\n  if (success) {\r\n    return shader\r\n  }\r\n\r\n  console.log('getShaderInfoLog', gl.getShaderInfoLog(shader))\r\n  gl.deleteShader(shader)\r\n}\r\n\r\n\r\n// 然后我们将这两个着色器 link（链接）到一个 program（着色程序）\r\nexport function createProgram(\r\n  gl, vertexShader, fragmentShader\r\n) {\r\n  const program = gl.createProgram()\r\n  gl.attachShader(program, vertexShader)\r\n  gl.attachShader(program, fragmentShader)\r\n  gl.linkProgram(program)\r\n\r\n  const success = gl.getProgramParameter(program, gl.LINK_STATUS)\r\n  if (success) {\r\n    return program\r\n  }\r\n\r\n  console.log(gl.getProgramInfoLog(program))\r\n  gl.deleteProgram(program)\r\n}\r\n\r\nexport function createProgramFromStrings(\r\n  gl, vertexShaderSource, fragmentShaderSource\r\n) {\r\n// 创建顶点着色器\r\n  const vertexShader = createShader(\r\n    gl, gl.VERTEX_SHADER, vertexShaderSource\r\n  )\r\n  // 创建片段着色器\r\n  const fragmentShader = createShader(\r\n    gl, gl.FRAGMENT_SHADER, fragmentShaderSource\r\n  )\r\n  // 将两个着色器链接在一起\r\n  return createProgram(\r\n    gl, vertexShader, fragmentShader\r\n  )\r\n}\r\n\r\n\r\n\r\n\r\n// 定义卷积核\r\nexport const kernels = {\r\n  normal: [\r\n    0, 0, 0,\r\n    0, 1, 0,\r\n    0, 0, 0\r\n  ],\r\n  gaussianBlur: [\r\n    0.045, 0.122, 0.045,\r\n    0.122, 0.332, 0.122,\r\n    0.045, 0.122, 0.045\r\n  ],\r\n  gaussianBlur2: [\r\n    1, 2, 1,\r\n    2, 4, 2,\r\n    1, 2, 1\r\n  ],\r\n  gaussianBlur3: [\r\n    0, 1, 0,\r\n    1, 1, 1,\r\n    0, 1, 0\r\n  ],\r\n  unsharpen: [\r\n    -1, -1, -1,\r\n    -1,  9, -1,\r\n    -1, -1, -1\r\n  ],\r\n  sharpness: [\r\n    0, -1, 0,\r\n    -1, 5, -1,\r\n    0, -1, 0\r\n  ],\r\n  sharpen: [\r\n    -1, -1, -1,\r\n    -1, 16, -1,\r\n    -1, -1, -1\r\n  ],\r\n  edgeDetect: [\r\n    -0.125, -0.125, -0.125,\r\n    -0.125,  1,     -0.125,\r\n    -0.125, -0.125, -0.125\r\n  ],\r\n  edgeDetect2: [\r\n    -1, -1, -1,\r\n    -1,  8, -1,\r\n    -1, -1, -1\r\n  ],\r\n  edgeDetect3: [\r\n    -5, 0, 0,\r\n    0, 0, 0,\r\n    0, 0, 5\r\n  ],\r\n  edgeDetect4: [\r\n    -1, -1, -1,\r\n    0,  0,  0,\r\n    1,  1,  1\r\n  ],\r\n  edgeDetect5: [\r\n    -1, -1, -1,\r\n    2,  2,  2,\r\n    -1, -1, -1\r\n  ],\r\n  edgeDetect6: [\r\n    -5, -5, -5,\r\n    -5, 39, -5,\r\n    -5, -5, -5\r\n  ],\r\n  sobelHorizontal: [\r\n    1,  2,  1,\r\n    0,  0,  0,\r\n    -1, -2, -1\r\n  ],\r\n  sobelVertical: [\r\n    1,  0, -1,\r\n    2,  0, -2,\r\n    1,  0, -1\r\n  ],\r\n  previtHorizontal: [\r\n    1,  1,  1,\r\n    0,  0,  0,\r\n    -1, -1, -1\r\n  ],\r\n  previtVertical: [\r\n    1,  0, -1,\r\n    1,  0, -1,\r\n    1,  0, -1\r\n  ],\r\n  boxBlur: [\r\n    0.111, 0.111, 0.111,\r\n    0.111, 0.111, 0.111,\r\n    0.111, 0.111, 0.111\r\n  ],\r\n  triangleBlur: [\r\n    0.0625, 0.125, 0.0625,\r\n    0.125,  0.25,  0.125,\r\n    0.0625, 0.125, 0.0625\r\n  ],\r\n  emboss: [\r\n    -2, -1,  0,\r\n    -1,  1,  1,\r\n    0,  1,  2\r\n  ],\r\n}\r\n\r\n\r\nexport const effects = [\r\n  { name: 'gaussianBlur3', on: true, },\r\n  { name: 'gaussianBlur3', on: true, },\r\n  { name: 'gaussianBlur3', on: true, },\r\n  { name: 'sharpness', },\r\n  { name: 'sharpness', },\r\n  { name: 'sharpness', },\r\n  { name: 'sharpen', },\r\n  { name: 'sharpen', },\r\n  { name: 'sharpen', },\r\n  { name: 'unsharpen', },\r\n  { name: 'unsharpen', },\r\n  { name: 'unsharpen', },\r\n  { name: 'emboss', on: true, },\r\n  { name: 'edgeDetect', },\r\n  { name: 'edgeDetect', },\r\n  { name: 'edgeDetect3', },\r\n  { name: 'edgeDetect3', }\r\n]\r\n","// extracted by mini-css-extract-plugin\nexport default {\"canvasContainer\":\"canvasContainer_AroEJ\",\"canvasUi\":\"canvasUi_B_Bta\",\"canvasButton\":\"canvasButton_l2P0H\"};"],"names":["ShadersAndGLSL","canvasRef","useRef","className","styles","ref","width","height","onClick","canvas","gl","getContext","vertexShader","createShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","program","createProgram","offsetLoc","getUniformLocation","positionAttributeLocation","getAttribLocation","positionBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","viewport","clearColor","clear","COLOR_BUFFER_BIT","useProgram","uniform4fv","enableVertexAttribArray","type","FLOAT","vertexAttribPointer","primitiveType","TRIANGLES","drawArrays","triangles","current","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","log","getShaderInfoLog","deleteShader","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","createProgramFromStrings","vertexShaderSource","fragmentShaderSource","kernels","normal","gaussianBlur","gaussianBlur2","gaussianBlur3","unsharpen","sharpness","sharpen","edgeDetect","edgeDetect2","edgeDetect3","edgeDetect4","edgeDetect5","edgeDetect6","sobelHorizontal","sobelVertical","previtHorizontal","previtVertical","boxBlur","triangleBlur","emboss","effects","name","on"],"sourceRoot":""}