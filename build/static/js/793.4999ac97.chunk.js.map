{"version":3,"file":"static/js/793.4999ac97.chunk.js","mappings":"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","sources":["pages/window/Webgl/rectangles.js","pages/window/Webgl/index.js","pages/window/Webgl/triangles.js","pages/window/Webgl/rectangle.js","pages/window/webglCommon/index.js","webpack://my-app-react/./src/pages/window/webglCommon/style.less?3477"],"sourcesContent":["import { createProgramFromStrings } from '../webglCommon'\n\n\nexport function rectangles(gl) {\n  // 创建上下文\n  if (!gl) {\n    return\n  }\n  // 顶点着色器源\n  const vertexShaderSource = `\n          // 一个属性值，从缓冲区获取数据\n        attribute vec2 a_position;\n        // 添加了一个uniform（全局变量）叫做u_resolution\n        uniform vec2 u_resolution;\n        \n        // 所有的着色器都有一个main函数\n        void main() {\n    \n        // 从像素坐标转换到 0 -> 1\n        vec2 zeroToOne = a_position / u_resolution;\n     \n        // 再把 0->1 转换 0->2\n        vec2 zeroToTwo = zeroToOne * 2.0;\n     \n        // 把 0->2 转换到 -1->+1 (裁剪空间)\n        vec2 clipSpace = zeroToTwo - 1.0;\n     \n        gl_Position = vec4(clipSpace, 0, -1);\n        // 需翻转y轴\n        // gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);\n      }\n          `\n  // 片段着色器\n  const fragmentShaderSource = `\n        \n    \n        // 片断着色器没有默认精度，所以我们需要设置一个精度\n        // mediump是一个不错的默认值，代表“medium precision”（中等精度）\n        precision mediump float;\n        uniform vec4 u_color;\n        void main() {\n        // gl_FragColor 是一个片断着色器主要设置的变量\n        // 这里的颜色可参考rgba格式进行设置\n        gl_FragColor = u_color;\n      }\n          `\n\n\n  // 将两个着色器链接在一起\n\n  const program = createProgramFromStrings(\n    gl, vertexShaderSource, fragmentShaderSource\n  )\n\n  // 创建好了着色程序，我们还需要对他提供数据\n  // glsl着色程序唯一输入是一个属性值a_position，从刚创建的着色程序找到这个属性值所在位置\n  // 寻找属性值位置应该在初始化的时候完成，而不是在渲染时完成\n  const positionAttributeLocation = gl.getAttribLocation(program, 'a_position')\n\n  // 为了设置它的值我们需要找到它的位置。\n  const resolutionUniformLocation = gl.getUniformLocation(program, 'u_resolution')\n  // 找到全局颜色变量的位置\n  const colorUniformLocation = gl.getUniformLocation(program, 'u_color')\n\n  // 属性值从缓冲区获取，所以创建一个缓冲\n  const positionBuffer = gl.createBuffer()\n\n  // webgl可以通过绑定点操控全局范围内的许多数据，可以吧绑定点想象成一个全局变量\n  // 首先绑定一个数据源到绑定点，然后引用绑定点指向该数据源\n  // 以下我们绑定位置信息缓冲（下面的绑定点就是ARRAY_BUFFER）\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer)\n\n\n\n\n  // 告诉webgl怎样吧提供的gl_Position裁剪空间坐标对应到画布像素坐标（通常画布像素坐标也叫屏幕坐标）\n  // 需要调用gl.viewport 方法并传递画布的当前尺寸\n  // 这样就告诉webgl裁剪空间的-1=>+1分别对应到X轴的0=>gl.canvas.width 和y轴的 0 -> gl.canvas.height\n  gl.viewport(\n    0, 0, gl.canvas.width, gl.canvas.height\n  )\n\n  // 用0, 0, 0, 0清空画布，分别对应 r, g, b, alpha （红，绿，蓝，阿尔法）值\n  gl.clearColor(\n    0, 0, 0, 0\n  )\n  gl.clear(gl.COLOR_BUFFER_BIT)\n\n  // 告诉webgl运行哪个着色程序\n  gl.useProgram(program)\n\n  // 告诉webgl怎么从我们之前准备的缓冲中获取数据给着色器中的属性\n  // 首先需要启用对应的属性\n  gl.enableVertexAttribArray(positionAttributeLocation)\n\n  // 将绑定点绑定到缓冲数据（positionBuffer）\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer)\n\n  // 告诉属性怎么从positionBuffer中读取数据 (ARRAY_BUFFER)\n  const size = 2          // 每次迭代运行提取两个单位数据\n  const type = gl.FLOAT   // 每个单位的数据类型是32位浮点型\n  const normalize = false // 不需要归一化数据\n  const stride = 0        // 0 = 移动单位数量 * 每个单位占用内存（sizeof(type)）每次迭代运行运动多少内存到下一个数据开始点\n  const offset = 0        // 从缓冲起始位置开始读取\n  // 一个额外的信息是gl.vertexAttribPointer是将属性绑定到当前的ARRAY_BUFFER。\n  // 换句话说就是绑定到 positionBuffer上。\n  // 这也意味着现在利用绑定点随意将 ARRAY_BUFFER绑定到其它数据上后，该属性依然从positionBuffer上读取数据\n  gl.vertexAttribPointer(\n    positionAttributeLocation, size, type, normalize, stride, offset\n  )\n\n  // 设置全局变量 分辨率\n  gl.uniform2f(\n    resolutionUniformLocation, gl.canvas.width, gl.canvas.height\n  )\n\n  // 绘制50个随机颜色矩形\n  for (let ii = 0; ii < 50; ++ii) {\n    // 创建一个随机矩形\n    // 并将写入位置缓冲\n    // 因为位置缓冲是我们绑定在\n    // `ARRAY_BUFFER`绑定点上的最后一个缓冲\n    setRectangle(\n      gl, randomInt(300), randomInt(300), randomInt(300), randomInt(300)\n    )\n\n    // 设置一个随机颜色\n    gl.uniform4f(\n      colorUniformLocation, Math.random(), Math.random(), Math.random(), 1\n    )\n\n    // 绘制矩形\n    gl.drawArrays(\n      gl.TRIANGLES, 0, 6\n    )\n  }\n}\n\n// 返回 0 到 range 范围内的随机整数\nfunction randomInt(range) {\n  return Math.floor(Math.random() * range)\n}\n\n// 用参数生成矩形顶点并写进缓冲\n\nfunction setRectangle(\n  gl, x, y, width, height\n) {\n  const x1 = x\n  const x2 = x + width\n  const y1 = y\n  const y2 = y + height\n\n  // 注意: gl.bufferData(gl.ARRAY_BUFFER, ...) 将会影响到\n  // 当前绑定点`ARRAY_BUFFER`的绑定缓冲\n  // 目前我们只有一个缓冲，如果我们有多个缓冲\n  // 我们需要先将所需缓冲绑定到`ARRAY_BUFFER`\n\n  gl.bufferData(\n    gl.ARRAY_BUFFER, new Float32Array([\n      x1, y1,\n      x2, y1,\n      x1, y2,\n      x1, y2,\n      x2, y1,\n      x2, y2]), gl.STATIC_DRAW\n  )\n}\n\n","import React, { useRef } from 'react'\r\nimport styles from '../webglCommon/style.less'\r\nimport { triangles } from './triangles'\r\nimport { rectangle } from './rectangle'\r\nimport { rectangles } from './rectangles'\r\n\r\nexport default function Webgl() {\r\n  const canvasRef = useRef(null)\r\n  const drawTriangles = () => {\r\n    triangles(canvasRef.current)\r\n  }\r\n  const drawLine = () => {\r\n    rectangle(canvasRef.current)\r\n  }\r\n  const drawRectangles = () => {\r\n    rectangles(canvasRef.current.getContext('webgl'))\r\n  }\r\n  return (\r\n    <div>\r\n      <canvas className={ styles.canvasContainer} ref={canvasRef} width={400} height={300} ></canvas>\r\n      <div>\r\n        <div className={styles.canvasButton} onClick={drawTriangles}>绘制三角形</div>\r\n        <div className={styles.canvasButton} onClick={drawLine}>绘制矩形</div>\r\n        <div className={styles.canvasButton} onClick={drawRectangles}>绘制50个矩形</div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import { createShader, createProgram } from '../webglCommon'\r\n\r\n\r\nexport function triangles(canvas) {\r\n  // Get A WebGL context\r\n  const gl = canvas.getContext('webgl')\r\n  if (!gl) {\r\n    return\r\n  }\r\n\r\n  // Get the strings for our GLSL shaders\r\n  // 顶点着色器源\r\n  const vertexShaderSource = `\r\n        // 一个属性值，从缓冲区获取数据\r\n        // a_position属性的数据类型是vec4\r\n        // vec4是一个有四个浮点数据的数据类型。\r\n        // 在JavaScript中你可以把它想象成 a_position = {x: 0, y: 0, z: 0, w: 0}。之前我们设置的size = 2，\r\n        // 属性默认值是0, 0, 0, 1，然后属性将会从缓冲中获取前两个值（ x 和 y ）。 z和w还是默认值 0 和 1 。\r\n        \r\n        attribute vec4 a_position;\r\n    \r\n        // 所有的着色器都有一个main函数\r\n        void main() {\r\n    \r\n        // gl_Position 是一个顶点着色器主要设置的变量\r\n        gl_Position = a_position;\r\n      }\r\n          `\r\n  // 片段着色器\r\n  const fragmentShaderSource = `\r\n        \r\n    \r\n        // 片断着色器没有默认精度，所以我们需要设置一个精度\r\n        // mediump是一个不错的默认值，代表“medium precision”（中等精度）\r\n        precision mediump float;\r\n    \r\n        void main() {\r\n        // gl_FragColor 是一个片断着色器主要设置的变量\r\n        // 这里的颜色可参考rgba格式进行设置\r\n        gl_FragColor = vec4(0, 0, 0, 1); // 返回“瑞迪施紫色”\r\n      }\r\n          `\r\n\r\n  // 创建顶点着色器\r\n  const vertexShader = createShader(\r\n    gl, gl.VERTEX_SHADER, vertexShaderSource\r\n  )\r\n  // 创建片段着色器\r\n  const fragmentShader = createShader(\r\n    gl, gl.FRAGMENT_SHADER, fragmentShaderSource\r\n  )\r\n\r\n  // 将两个着色器链接在一起\r\n  const program = createProgram(\r\n    gl, vertexShader, fragmentShader\r\n  )\r\n\r\n  // 创建好了着色程序，我们还需要对他提供数据\r\n  // glsl着色程序唯一输入是一个属性值a_position，从刚创建的着色程序找到这个属性值所在位置\r\n  // 寻找属性值位置应该在初始化的时候完成，而不是在渲染时完成\r\n  const positionAttributeLocation = gl.getAttribLocation(program, 'a_position')\r\n\r\n  // 属性值从缓冲区获取，所以创建一个缓冲\r\n  const positionBuffer = gl.createBuffer()\r\n\r\n  // webgl可以通过绑定点操控全局范围内的许多数据，可以吧绑定点想象成一个全局变量\r\n  // 首先绑定一个数据源到绑定点，然后引用绑定点指向该数据源\r\n  // 以下我们绑定位置信息缓冲（下面的绑定点就是ARRAY_BUFFER）\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer)\r\n\r\n  // 三个二维点坐标\r\n  const positions = [\r\n    0, 0,\r\n    0, 1,\r\n    -1, 0,\r\n    // 添加下面三点即可利用三角形绘制矩形\r\n    -1, 1,\r\n    0, 1,\r\n    -1, 0\r\n  ]\r\n  // webgl需要强数据类型。所以 new Float32Array(positions) 创建了32位浮点型数据序列\r\n  // 并从positions中复制数据待序列中，\r\n  // gl.bufferData复制这些数据到GPU的positionBuffer对象上\r\n  // 数据最终传递到positionBuffer是因为上一步我们已经将它绑定在了ARRAY_BUFFER（也就是绑定点）上\r\n  // 最后一个参数gl.STATIC_DRAW是提示WebGL我们将怎么使用这些数据\r\n  // WebGL会根据提示做出一些优化。\r\n  // gl.STATIC_DRAW提示WebGL我们不会经常改变这些数据。\r\n  gl.bufferData(\r\n    gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW\r\n  )\r\n\r\n  // 以上都是初始代码，在页面加载时只会运行一次.\r\n  // 以下是渲染代码\r\n\r\n  // 告诉webgl怎样吧提供的gl_Position裁剪空间坐标对应到画布像素坐标（通常画布像素坐标也叫屏幕坐标）\r\n  // 需要调用gl.viewport 方法并传递画布的当前尺寸\r\n  // 这样就告诉webgl裁剪空间的-1=>+1分别对应到X轴的0=>gl.canvas.width 和y轴的 0 -> gl.canvas.height\r\n  gl.viewport(\r\n    0, 0, gl.canvas.width, gl.canvas.height\r\n  )\r\n\r\n  // 用0, 0, 0, 0清空画布，分别对应 r, g, b, alpha （红，绿，蓝，阿尔法）值\r\n  gl.clearColor(\r\n    0, 0, 0, 0\r\n  )\r\n  gl.clear(gl.COLOR_BUFFER_BIT)\r\n\r\n  // 告诉webgl运行哪个着色程序\r\n  gl.useProgram(program)\r\n\r\n  // 告诉webgl怎么从我们之前准备的缓冲中获取数据给着色器中的属性\r\n  // 首先需要启用对应的属性\r\n  gl.enableVertexAttribArray(positionAttributeLocation)\r\n\r\n  // 将绑定点绑定到缓冲数据（positionBuffer）\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer)\r\n\r\n  // 告诉属性怎么从positionBuffer中读取数据 (ARRAY_BUFFER)\r\n  const size = 2          // 每次迭代运行提取两个单位数据\r\n  const type = gl.FLOAT   // 每个单位的数据类型是32位浮点型\r\n  const normalize = false // 不需要归一化数据\r\n  const stride = 0        // 0 = 移动单位数量 * 每个单位占用内存（sizeof(type)）每次迭代运行运动多少内存到下一个数据开始点\r\n  const offset = 0        // 从缓冲起始位置开始读取\r\n  // 一个额外的信息是gl.vertexAttribPointer是将属性绑定到当前的ARRAY_BUFFER。\r\n  // 换句话说就是绑定到 positionBuffer上。\r\n  // 这也意味着现在利用绑定点随意将 ARRAY_BUFFER绑定到其它数据上后，该属性依然从positionBuffer上读取数据\r\n  gl.vertexAttribPointer(\r\n    positionAttributeLocation, size, type, normalize, stride, offset\r\n  )\r\n\r\n\r\n\r\n\r\n  // 开始绘制\r\n  // 因为count = 3，所以顶点着色器将运行三次\r\n  // 第一次运行将会从位置缓冲中读取前两个值赋给属性值a_position.x和a_position.y\r\n  // 第二次运行a_position.xy将会被赋予后两个值\r\n  // 最后一次运行将被赋予最后两个值\r\n\r\n  // 因为我们设置primitiveType（图元类型）为 gl.TRIANGLES（三角形）， 顶点着色器每运行三次\r\n  // WebGL将会根据三个gl_Position值绘制一个三角形，\r\n  // 不论我们的画布大小是多少，在裁剪空间中每个方向的坐标范围都是 -1 到 1 。\r\n  const primitiveType = gl.TRIANGLES\r\n  // 这里每6次顶点着色器处理成像素坐标点后才会渲染\r\n  const count = 6\r\n\r\n\r\n  // WebGL将会把它们从裁剪空间转换到屏幕空间并在屏幕空间绘制一个三角形， 如果画布大小是400×300我们会得到类似以下的转换\r\n  //   0, 0,   -> 200, 150 位置1\r\n  //   0, 0.5, -> 200, 225 位置2\r\n  //   0.7, 0, -> 340, 150 位置3\r\n\r\n  // 从以上的推断可以得出相关结论\r\n  // canvas中心点为基础点（0，0）\r\n  // （-1，-1） 表示（200 + (200*(-1)),150 + (150*(-1))）\r\n  // （-0.5，0.3） 表示（200 + (200*(-5)),150 + (150*(-3))）\r\n  gl.drawArrays(\r\n    primitiveType, offset, count\r\n  )\r\n}\r\n\r\n\r\n\r\n// todo\r\n/**\r\n *\r\n * 上面的例子中顶点着色器只是简单传递了位置信息\r\n * 由于位置坐标就是裁剪空间中的坐标，所以着色器没有特殊的执行，\r\n * 如果想要实现三位渲染，那么就需要提供合适的着色器将三维坐标转换到裁剪空间坐标\r\n * 因为webgl只是一个光栅化的API\r\n *\r\n * 裁剪空间的x坐标范围是 -1 到 +1. 这就意味着0在中间并且正值在它右边。\r\n * 裁剪空间中 -1 是最底端 +1 是最顶端\r\n * 对于描述二维空间中的物体，比起裁剪空间坐标你可能更希望使用屏幕像素坐标\r\n */\r\n","\r\nimport { createProgramFromStrings } from '../webglCommon'\r\n\r\n\r\n\r\nexport function rectangle(canvas) {\r\n  // Get A WebGL context\r\n  const gl = canvas.getContext('webgl')\r\n  if (!gl) {\r\n    return\r\n  }\r\n\r\n  // Get the strings for our GLSL shaders\r\n  // 顶点着色器源\r\n  const vertexShaderSource = `\r\n          // 一个属性值，从缓冲区获取数据\r\n        attribute vec2 a_position;\r\n        // 添加了一个uniform（全局变量）叫做u_resolution\r\n        //\r\n        uniform vec2 u_resolution;\r\n        \r\n        // 所有的着色器都有一个main函数\r\n        void main() {\r\n    \r\n        // 从像素坐标转换到 0 -> 1\r\n        vec2 zeroToOne = a_position / u_resolution;\r\n     \r\n        // 再把 0->1 转换 0->2\r\n        vec2 zeroToTwo = zeroToOne * 2.0;\r\n     \r\n        // 把 0->2 转换到 -1->+1 (裁剪空间)\r\n        vec2 clipSpace = zeroToTwo - 1.0;\r\n        \r\n        // 以下未翻转等同于 gl_Position = vec4(clipSpace*vec2(1,1), 0, 1);\r\n        gl_Position = vec4(clipSpace, 0, 1);\r\n        // 需翻转y轴\r\n        gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);\r\n      }\r\n          `\r\n  // 片段着色器\r\n  const fragmentShaderSource = `\r\n        \r\n    \r\n        // 片断着色器没有默认精度，所以我们需要设置一个精度\r\n        // mediump是一个不错的默认值，代表“medium precision”（中等精度）\r\n        precision mediump float;\r\n    \r\n        void main() {\r\n        // gl_FragColor 是一个片断着色器主要设置的变量\r\n        // 这里的颜色可参考rgba格式进行设置\r\n        gl_FragColor = vec4(0, 0, 0, 1); // 返回“瑞迪施紫色”\r\n      }\r\n          `\r\n\r\n  // 将两个着色器链接在一起\r\n  const program = createProgramFromStrings(\r\n    gl, vertexShaderSource, fragmentShaderSource\r\n  )\r\n\r\n  // 为了设置它的值我们需要找到它的位置。\r\n  const resolutionUniformLocation = gl.getUniformLocation(program, 'u_resolution')\r\n\r\n  // 创建好了着色程序，我们还需要对他提供数据\r\n  // glsl着色程序唯一输入是一个属性值a_position，从刚创建的着色程序找到这个属性值所在位置\r\n  // 寻找属性值位置应该在初始化的时候完成，而不是在渲染时完成\r\n  const positionAttributeLocation = gl.getAttribLocation(program, 'a_position')\r\n\r\n\r\n\r\n  // 属性值从缓冲区获取，所以创建一个缓冲\r\n  const positionBuffer = gl.createBuffer()\r\n\r\n  // webgl可以通过绑定点操控全局范围内的许多数据，可以吧绑定点想象成一个全局变量\r\n  // 首先绑定一个数据源到绑定点，然后引用绑定点指向该数据源\r\n  // 以下我们绑定位置信息缓冲（下面的绑定点就是ARRAY_BUFFER）\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer)\r\n\r\n\r\n  // 通过设置u_resolution为画布的分辨率， 着色器将会从positionBuffer中获取像素坐标将之转换为对应的裁剪空间坐标。\r\n  // 通过绘制两个三角形来绘制一个矩形， 每个三角形有三个点。\r\n  const positions = [\r\n    0, 0,\r\n    0, 100,\r\n    100, 100,\r\n    100, 100,\r\n    100, 0,\r\n    0, 0\r\n  ]\r\n\r\n  // webgl需要强数据类型。所以 new Float32Array(positions) 创建了32位浮点型数据序列\r\n  // 并从positions中复制数据待序列中，\r\n  // gl.bufferData复制这些数据到GPU的positionBuffer对象上\r\n  // 数据最终传递到positionBuffer是因为上一步我们已经将它绑定在了ARRAY_BUFFER（也就是绑定点）上\r\n  // 最后一个参数gl.STATIC_DRAW是提示WebGL我们将怎么使用这些数据\r\n  // WebGL会根据提示做出一些优化。\r\n  // gl.STATIC_DRAW提示WebGL我们不会经常改变这些数据。\r\n\r\n  gl.bufferData(\r\n    gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW\r\n  )\r\n\r\n\r\n\r\n  // 以上都是初始代码，在页面加载时只会运行一次.\r\n  // 以下是渲染代码\r\n\r\n\r\n\r\n  // 告诉webgl怎样吧提供的gl_Position裁剪空间坐标对应到画布像素坐标（通常画布像素坐标也叫屏幕坐标）\r\n  // 需要调用gl.viewport 方法并传递画布的当前尺寸\r\n  // 这样就告诉webgl裁剪空间的-1=>+1分别对应到X轴的0=>gl.canvas.width 和y轴的 0 -> gl.canvas.height\r\n  gl.viewport(\r\n    0, 0, gl.canvas.width, gl.canvas.height\r\n  )\r\n\r\n  // 用0, 0, 0, 0清空画布，分别对应 r, g, b, alpha （红，绿，蓝，阿尔法）值\r\n  gl.clearColor(\r\n    0, 0, 0, 0\r\n  )\r\n  gl.clear(gl.COLOR_BUFFER_BIT)\r\n\r\n  // 告诉webgl运行哪个着色程序\r\n  // 设置好使用这个着色程序后，可以设置刚才创建的全局变量的值。 gl.useProgram就与之前讲到的gl.bindBuffer相似，\r\n  // 设置当前使用的着色程序。 之后所有类似gl.uniformXXX格式的方法都是设置当前着色程序的全局变量\r\n  gl.useProgram(program)\r\n  // 在同一个canvas上调用多次渲染时，这部分代码是必须要执行的，可以抽取为一个公共模块\r\n  // ==========================================================================================\r\n  // 告诉webgl怎么从我们之前准备的缓冲中获取数据给着色器中的属性\r\n  // 首先需要启用对应的属性\r\n\r\n  gl.enableVertexAttribArray(positionAttributeLocation)\r\n  // ==========================================================================================\r\n\r\n\r\n  // 将绑定点绑定到缓冲数据（positionBuffer）\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer)\r\n\r\n  // 告诉属性怎么从positionBuffer中读取数据 (ARRAY_BUFFER)\r\n  const size = 2          // 每次迭代运行提取两个单位数据\r\n  const type = gl.FLOAT   // 每个单位的数据类型是32位浮点型\r\n  const normalize = false // 不需要归一化数据\r\n  const stride = 0        // 0 = 移动单位数量 * 每个单位占用内存（sizeof(type)）每次迭代运行运动多少内存到下一个数据开始点\r\n  const offset = 0        // 从缓冲起始位置开始读取\r\n  // 一个额外的信息是gl.vertexAttribPointer是将属性绑定到当前的ARRAY_BUFFER。\r\n  // 换句话说就是绑定到 positionBuffer上。\r\n  // 这也意味着现在利用绑定点随意将 ARRAY_BUFFER绑定到其它数据上后，该属性依然从positionBuffer上读取数据\r\n  gl.vertexAttribPointer(\r\n    positionAttributeLocation, size, type, normalize, stride, offset\r\n  )\r\n\r\n  // a_position属性的数据类型是vec4\r\n  // vec4是一个有四个浮点数据的数据类型。\r\n  // 在JavaScript中你可以把它想象成 a_position = {x: 0, y: 0, z: 0, w: 0}。之前我们设置的size = 2，\r\n  // 属性默认值是0, 0, 0, 1，然后属性将会从缓冲中获取前两个值（ x 和 y ）。 z和w还是默认值 0 和 1 。\r\n\r\n\r\n  // 设置全局变量 分辨率\r\n  gl.uniform2f(\r\n    resolutionUniformLocation, gl.canvas.width, gl.canvas.height\r\n  )\r\n\r\n  // 开始绘制\r\n  // 因为count = 6，所以顶点着色器将运行6次\r\n  // 第一次运行将会从位置缓冲中读取前两个值赋给属性值a_position.x和a_position.y\r\n  // 第二次运行a_position.xy将会被赋予后两个值，最后一次运行将被赋予最后两个值\r\n  // 最后一次运行将被赋予最后两个值\r\n\r\n  // 因为我们设置primitiveType（图元类型）为 gl.TRIANGLES（三角形）， 顶点着色器每运行三次\r\n  // WebGL将会根据三个gl_Position值绘制一个三角形，\r\n  // 不论我们的画布大小是多少，在裁剪空间中每个方向的坐标范围都是 -1 到 1 。\r\n  const primitiveType = gl.TRIANGLES\r\n  const count = 6\r\n\r\n\r\n  // WebGL将会把它们从裁剪空间转换到屏幕空间并在屏幕空间绘制一个三角形， 如果画布大小是400×300我们会得到类似以下的转换\r\n  //   0, 0,   -> 200, 150 位置1\r\n  //   0, 0.5, -> 200, 225 位置2\r\n  //   0.7, 0, -> 340, 150 位置3\r\n\r\n  // 从以上的推断可以得出相关结论\r\n  // canvas中心点为基础点（0，0）\r\n  // （-1，-1） 表示（200 + (200*(-1)),150 + (150*(-1))）\r\n  // （-0.5，0.3） 表示（200 + (200*(-5)),150 + (150*(-3))）\r\n  gl.drawArrays(\r\n    primitiveType, offset, count\r\n  )\r\n\r\n}\r\n\r\n\r\n\r\n// todo\r\n/**\r\n *\r\n * 上面的例子中顶点着色器只是简单传递了位置信息\r\n * 由于位置坐标就是裁剪空间中的坐标，所以着色器没有特殊的执行，\r\n * 如果想要实现三位渲染，那么就需要提供合适的着色器将三维坐标转换到裁剪空间坐标\r\n * 因为webgl只是一个光栅化的API\r\n *\r\n * WebGL认为左下角是 0，0 。 想要像传统二维API那样起点在左上角，我们只需翻转y轴即可\r\n */\r\n","\r\n\r\n// 创建着色器方法，输入参数：渲染上下文，着色器类型，数据源\r\nexport function createShader(\r\n  gl, type, source\r\n) {\r\n  const shader = gl.createShader(type) // 创建着色器对象\r\n  gl.shaderSource(shader, source) // 提供数据源\r\n  gl.compileShader(shader) // 编译 -> 生成着色器\r\n  const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS)\r\n  if (success) {\r\n    return shader\r\n  }\r\n\r\n  console.log('getShaderInfoLog', gl.getShaderInfoLog(shader))\r\n  gl.deleteShader(shader)\r\n}\r\n\r\n\r\n// 然后我们将这两个着色器 link（链接）到一个 program（着色程序）\r\nexport function createProgram(\r\n  gl, vertexShader, fragmentShader\r\n) {\r\n  const program = gl.createProgram()\r\n  gl.attachShader(program, vertexShader)\r\n  gl.attachShader(program, fragmentShader)\r\n  gl.linkProgram(program)\r\n\r\n  const success = gl.getProgramParameter(program, gl.LINK_STATUS)\r\n  if (success) {\r\n    return program\r\n  }\r\n\r\n  console.log(gl.getProgramInfoLog(program))\r\n  gl.deleteProgram(program)\r\n}\r\n\r\nexport function createProgramFromStrings(\r\n  gl, vertexShaderSource, fragmentShaderSource\r\n) {\r\n// 创建顶点着色器\r\n  const vertexShader = createShader(\r\n    gl, gl.VERTEX_SHADER, vertexShaderSource\r\n  )\r\n  // 创建片段着色器\r\n  const fragmentShader = createShader(\r\n    gl, gl.FRAGMENT_SHADER, fragmentShaderSource\r\n  )\r\n  // 将两个着色器链接在一起\r\n  return createProgram(\r\n    gl, vertexShader, fragmentShader\r\n  )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"canvasContainer\":\"canvasContainer_AroEJ\",\"canvasButton\":\"canvasButton_l2P0H\"};"],"names":["randomInt","range","Math","floor","random","setRectangle","gl","x","y","width","height","x1","x2","y1","y2","bufferData","ARRAY_BUFFER","Float32Array","STATIC_DRAW","Webgl","canvasRef","useRef","className","styles","ref","onClick","canvas","getContext","vertexShader","createShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","program","createProgram","positionAttributeLocation","getAttribLocation","positionBuffer","createBuffer","bindBuffer","viewport","clearColor","clear","COLOR_BUFFER_BIT","useProgram","enableVertexAttribArray","type","FLOAT","vertexAttribPointer","primitiveType","TRIANGLES","drawArrays","triangles","current","createProgramFromStrings","resolutionUniformLocation","getUniformLocation","uniform2f","rectangle","colorUniformLocation","ii","uniform4f","rectangles","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","log","getShaderInfoLog","deleteShader","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","vertexShaderSource","fragmentShaderSource"],"sourceRoot":""}